// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Hazkey_Config_FileHash: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var sha256Sum: String = String()

  var type: Hazkey_Config_FileHash.ConfigFileType = .configMain

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ConfigFileType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case configMain // = 0
    case inputTable // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .configMain
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .configMain
      case 1: self = .inputTable
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .configMain: return 0
      case .inputTable: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_FileHash.ConfigFileType] = [
      .configMain,
      .inputTable,
    ]

  }

  init() {}
}

struct Hazkey_Config_InputTable: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var isBuiltIn: Bool = false

  var filename: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_Profile: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profileName: String {
    get {return _storage._profileName}
    set {_uniqueStorage()._profileName = newValue}
  }

  var profileID: String {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var useDefaultInputUiSettings: Bool {
    get {return _storage._useDefaultInputUiSettings}
    set {_uniqueStorage()._useDefaultInputUiSettings = newValue}
  }

  var autoConvertMode: Hazkey_Config_Profile.AutoConvertMode {
    get {return _storage._autoConvertMode}
    set {_uniqueStorage()._autoConvertMode = newValue}
  }

  var auxTextMode: Hazkey_Config_Profile.AuxTextMode {
    get {return _storage._auxTextMode}
    set {_uniqueStorage()._auxTextMode = newValue}
  }

  var suggestionListMode: Hazkey_Config_Profile.SuggestionListMode {
    get {return _storage._suggestionListMode}
    set {_uniqueStorage()._suggestionListMode = newValue}
  }

  var useRichSuggestion: Bool {
    get {return _storage._useRichSuggestion}
    set {_uniqueStorage()._useRichSuggestion = newValue}
  }

  var numSuggestions: Int32 {
    get {return _storage._numSuggestions}
    set {_uniqueStorage()._numSuggestions = newValue}
  }

  var useDefaultConversionUiSettings: Bool {
    get {return _storage._useDefaultConversionUiSettings}
    set {_uniqueStorage()._useDefaultConversionUiSettings = newValue}
  }

  var numCandidatesPerPage: Int32 {
    get {return _storage._numCandidatesPerPage}
    set {_uniqueStorage()._numCandidatesPerPage = newValue}
  }

  var useRichCandidates: Bool {
    get {return _storage._useRichCandidates}
    set {_uniqueStorage()._useRichCandidates = newValue}
  }

  var useDefaultHistorySettings: Bool {
    get {return _storage._useDefaultHistorySettings}
    set {_uniqueStorage()._useDefaultHistorySettings = newValue}
  }

  var useProfileIndependentHistory: Bool {
    get {return _storage._useProfileIndependentHistory}
    set {_uniqueStorage()._useProfileIndependentHistory = newValue}
  }

  var useInputHistory: Bool {
    get {return _storage._useInputHistory}
    set {_uniqueStorage()._useInputHistory = newValue}
  }

  var stopStoreNewHistory: Bool {
    get {return _storage._stopStoreNewHistory}
    set {_uniqueStorage()._stopStoreNewHistory = newValue}
  }

  var useDefaultSpecialConversionSettings: Bool {
    get {return _storage._useDefaultSpecialConversionSettings}
    set {_uniqueStorage()._useDefaultSpecialConversionSettings = newValue}
  }

  var specialConversionMode: Hazkey_Config_Profile.SpecialConversionMode {
    get {return _storage._specialConversionMode ?? Hazkey_Config_Profile.SpecialConversionMode()}
    set {_uniqueStorage()._specialConversionMode = newValue}
  }
  /// Returns true if `specialConversionMode` has been explicitly set.
  var hasSpecialConversionMode: Bool {return _storage._specialConversionMode != nil}
  /// Clears the value of `specialConversionMode`. Subsequent reads from it will return its default value.
  mutating func clearSpecialConversionMode() {_uniqueStorage()._specialConversionMode = nil}

  var useDefaultTableSettings: Bool {
    get {return _storage._useDefaultTableSettings}
    set {_uniqueStorage()._useDefaultTableSettings = newValue}
  }

  var enabledTables: [Hazkey_Config_InputTable] {
    get {return _storage._enabledTables}
    set {_uniqueStorage()._enabledTables = newValue}
  }

  var useDefaultZenzaiSettings: Bool {
    get {return _storage._useDefaultZenzaiSettings}
    set {_uniqueStorage()._useDefaultZenzaiSettings = newValue}
  }

  var zenzaiEnable: Bool {
    get {return _storage._zenzaiEnable}
    set {_uniqueStorage()._zenzaiEnable = newValue}
  }

  var zenzaiInferLimit: Int32 {
    get {return _storage._zenzaiInferLimit}
    set {_uniqueStorage()._zenzaiInferLimit = newValue}
  }

  var zenzaiContextualMode: Bool {
    get {return _storage._zenzaiContextualMode}
    set {_uniqueStorage()._zenzaiContextualMode = newValue}
  }

  var zenzaiVersionConfig: Hazkey_Config_Profile.ZenzaiVersionConfig {
    get {return _storage._zenzaiVersionConfig ?? Hazkey_Config_Profile.ZenzaiVersionConfig()}
    set {_uniqueStorage()._zenzaiVersionConfig = newValue}
  }
  /// Returns true if `zenzaiVersionConfig` has been explicitly set.
  var hasZenzaiVersionConfig: Bool {return _storage._zenzaiVersionConfig != nil}
  /// Clears the value of `zenzaiVersionConfig`. Subsequent reads from it will return its default value.
  mutating func clearZenzaiVersionConfig() {_uniqueStorage()._zenzaiVersionConfig = nil}

  var useZenzaiCustomWeight: Bool {
    get {return _storage._useZenzaiCustomWeight}
    set {_uniqueStorage()._useZenzaiCustomWeight = newValue}
  }

  var zenzaiWeightPath: String {
    get {return _storage._zenzaiWeightPath}
    set {_uniqueStorage()._zenzaiWeightPath = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AutoConvertMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unspecified // = 0
    case autoConvertDisabled // = 1
    case autoConvertAlways // = 2
    case autoConvertForMultipleChars // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .autoConvertDisabled
      case 2: self = .autoConvertAlways
      case 3: self = .autoConvertForMultipleChars
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .autoConvertDisabled: return 1
      case .autoConvertAlways: return 2
      case .autoConvertForMultipleChars: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_Profile.AutoConvertMode] = [
      .unspecified,
      .autoConvertDisabled,
      .autoConvertAlways,
      .autoConvertForMultipleChars,
    ]

  }

  enum AuxTextMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unspecified // = 0
    case auxTextDisabled // = 1
    case auxTextShowAlways // = 2
    case auxTextShowWhenCursorNotAtEnd // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .auxTextDisabled
      case 2: self = .auxTextShowAlways
      case 3: self = .auxTextShowWhenCursorNotAtEnd
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .auxTextDisabled: return 1
      case .auxTextShowAlways: return 2
      case .auxTextShowWhenCursorNotAtEnd: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_Profile.AuxTextMode] = [
      .unspecified,
      .auxTextDisabled,
      .auxTextShowAlways,
      .auxTextShowWhenCursorNotAtEnd,
    ]

  }

  enum SuggestionListMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unspecified // = 0
    case suggestionListDisabled // = 1
    case suggestionListShowNormalResults // = 2
    case suggestionListShowPredictiveResults // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .suggestionListDisabled
      case 2: self = .suggestionListShowNormalResults
      case 3: self = .suggestionListShowPredictiveResults
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .suggestionListDisabled: return 1
      case .suggestionListShowNormalResults: return 2
      case .suggestionListShowPredictiveResults: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_Profile.SuggestionListMode] = [
      .unspecified,
      .suggestionListDisabled,
      .suggestionListShowNormalResults,
      .suggestionListShowPredictiveResults,
    ]

  }

  struct SpecialConversionMode: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var commaSeparatedNumber: Bool = false

    var mailDomain: Bool = false

    var calender: Bool = false

    var time: Bool = false

    var romanTypography: Bool = false

    var unicodeCodepoint: Bool = false

    var hazkeyVersion: Bool = false

    var halfwidthKatakana: Bool = false

    var extendedEmoji: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct EnabledInputTable: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String = String()

    var isBuiltIn: Bool = false

    var filename: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ZenzaiVersionConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: Hazkey_Config_Profile.ZenzaiVersionConfig.OneOf_Version? = nil

    var v1: Hazkey_Config_Profile.ZenzaiVersionConfig.V1 {
      get {
        if case .v1(let v)? = version {return v}
        return Hazkey_Config_Profile.ZenzaiVersionConfig.V1()
      }
      set {version = .v1(newValue)}
    }

    var v2: Hazkey_Config_Profile.ZenzaiVersionConfig.V2 {
      get {
        if case .v2(let v)? = version {return v}
        return Hazkey_Config_Profile.ZenzaiVersionConfig.V2()
      }
      set {version = .v2(newValue)}
    }

    var v3: Hazkey_Config_Profile.ZenzaiVersionConfig.V3 {
      get {
        if case .v3(let v)? = version {return v}
        return Hazkey_Config_Profile.ZenzaiVersionConfig.V3()
      }
      set {version = .v3(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Version: Equatable, Sendable {
      case v1(Hazkey_Config_Profile.ZenzaiVersionConfig.V1)
      case v2(Hazkey_Config_Profile.ZenzaiVersionConfig.V2)
      case v3(Hazkey_Config_Profile.ZenzaiVersionConfig.V3)

    }

    struct V1: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct V2: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var profile: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct V3: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var profile: String = String()

      var topic: String = String()

      var style: String = String()

      var preference: String = String()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Hazkey_Config_GetConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_SetConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fileHashes: [Hazkey_Config_FileHash] = []

  var profiles: [Hazkey_Config_Profile] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_GetDefaultProfile: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_ClearAllHistory: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profileID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_CurrentConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fileHashes: [Hazkey_Config_FileHash] = []

  var profiles: [Hazkey_Config_Profile] = []

  var availableTables: [Hazkey_Config_InputTable] = []

  var isZenzaiAvailable: Bool = false

  var xdgConfigHomePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "hazkey.config"

extension Hazkey_Config_FileHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "sha256sum"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sha256Sum) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.sha256Sum.isEmpty {
      try visitor.visitSingularStringField(value: self.sha256Sum, fieldNumber: 2)
    }
    if self.type != .configMain {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_FileHash, rhs: Hazkey_Config_FileHash) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.sha256Sum != rhs.sha256Sum {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_FileHash.ConfigFileType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONFIG_MAIN"),
    1: .same(proto: "INPUT_TABLE"),
  ]
}

extension Hazkey_Config_InputTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InputTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "is_built_in"),
    3: .same(proto: "filename"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isBuiltIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filename) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.isBuiltIn != false {
      try visitor.visitSingularBoolField(value: self.isBuiltIn, fieldNumber: 2)
    }
    if !self.filename.isEmpty {
      try visitor.visitSingularStringField(value: self.filename, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_InputTable, rhs: Hazkey_Config_InputTable) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.isBuiltIn != rhs.isBuiltIn {return false}
    if lhs.filename != rhs.filename {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .standard(proto: "profile_name"),
    6: .standard(proto: "profile_id"),
    10: .standard(proto: "use_default_input_ui_settings"),
    11: .standard(proto: "auto_convert_mode"),
    12: .standard(proto: "aux_text_mode"),
    13: .standard(proto: "suggestion_list_mode"),
    14: .standard(proto: "use_rich_suggestion"),
    15: .standard(proto: "num_suggestions"),
    20: .standard(proto: "use_default_conversion_ui_settings"),
    21: .standard(proto: "num_candidates_per_page"),
    22: .standard(proto: "use_rich_candidates"),
    30: .standard(proto: "use_default_history_settings"),
    31: .standard(proto: "use_profile_independent_history"),
    32: .standard(proto: "use_input_history"),
    23: .standard(proto: "stop_store_new_history"),
    40: .standard(proto: "use_default_special_conversion_settings"),
    41: .standard(proto: "special_conversion_mode"),
    50: .standard(proto: "use_default_table_settings"),
    51: .standard(proto: "enabled_tables"),
    100: .standard(proto: "use_default_zenzai_settings"),
    101: .standard(proto: "zenzai_enable"),
    102: .standard(proto: "zenzai_infer_limit"),
    103: .standard(proto: "zenzai_contextual_mode"),
    104: .standard(proto: "zenzai_version_config"),
    105: .standard(proto: "use_zenzai_custom_weight"),
    106: .standard(proto: "zenzai_weight_path"),
  ]

  fileprivate class _StorageClass {
    var _profileName: String = String()
    var _profileID: String = String()
    var _useDefaultInputUiSettings: Bool = false
    var _autoConvertMode: Hazkey_Config_Profile.AutoConvertMode = .unspecified
    var _auxTextMode: Hazkey_Config_Profile.AuxTextMode = .unspecified
    var _suggestionListMode: Hazkey_Config_Profile.SuggestionListMode = .unspecified
    var _useRichSuggestion: Bool = false
    var _numSuggestions: Int32 = 0
    var _useDefaultConversionUiSettings: Bool = false
    var _numCandidatesPerPage: Int32 = 0
    var _useRichCandidates: Bool = false
    var _useDefaultHistorySettings: Bool = false
    var _useProfileIndependentHistory: Bool = false
    var _useInputHistory: Bool = false
    var _stopStoreNewHistory: Bool = false
    var _useDefaultSpecialConversionSettings: Bool = false
    var _specialConversionMode: Hazkey_Config_Profile.SpecialConversionMode? = nil
    var _useDefaultTableSettings: Bool = false
    var _enabledTables: [Hazkey_Config_InputTable] = []
    var _useDefaultZenzaiSettings: Bool = false
    var _zenzaiEnable: Bool = false
    var _zenzaiInferLimit: Int32 = 0
    var _zenzaiContextualMode: Bool = false
    var _zenzaiVersionConfig: Hazkey_Config_Profile.ZenzaiVersionConfig? = nil
    var _useZenzaiCustomWeight: Bool = false
    var _zenzaiWeightPath: String = String()

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _profileName = source._profileName
      _profileID = source._profileID
      _useDefaultInputUiSettings = source._useDefaultInputUiSettings
      _autoConvertMode = source._autoConvertMode
      _auxTextMode = source._auxTextMode
      _suggestionListMode = source._suggestionListMode
      _useRichSuggestion = source._useRichSuggestion
      _numSuggestions = source._numSuggestions
      _useDefaultConversionUiSettings = source._useDefaultConversionUiSettings
      _numCandidatesPerPage = source._numCandidatesPerPage
      _useRichCandidates = source._useRichCandidates
      _useDefaultHistorySettings = source._useDefaultHistorySettings
      _useProfileIndependentHistory = source._useProfileIndependentHistory
      _useInputHistory = source._useInputHistory
      _stopStoreNewHistory = source._stopStoreNewHistory
      _useDefaultSpecialConversionSettings = source._useDefaultSpecialConversionSettings
      _specialConversionMode = source._specialConversionMode
      _useDefaultTableSettings = source._useDefaultTableSettings
      _enabledTables = source._enabledTables
      _useDefaultZenzaiSettings = source._useDefaultZenzaiSettings
      _zenzaiEnable = source._zenzaiEnable
      _zenzaiInferLimit = source._zenzaiInferLimit
      _zenzaiContextualMode = source._zenzaiContextualMode
      _zenzaiVersionConfig = source._zenzaiVersionConfig
      _useZenzaiCustomWeight = source._useZenzaiCustomWeight
      _zenzaiWeightPath = source._zenzaiWeightPath
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._profileName) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._profileID) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultInputUiSettings) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._autoConvertMode) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._auxTextMode) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._suggestionListMode) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._useRichSuggestion) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._numSuggestions) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultConversionUiSettings) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._numCandidatesPerPage) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._useRichCandidates) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._stopStoreNewHistory) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultHistorySettings) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._useProfileIndependentHistory) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._useInputHistory) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultSpecialConversionSettings) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._specialConversionMode) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultTableSettings) }()
        case 51: try { try decoder.decodeRepeatedMessageField(value: &_storage._enabledTables) }()
        case 100: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultZenzaiSettings) }()
        case 101: try { try decoder.decodeSingularBoolField(value: &_storage._zenzaiEnable) }()
        case 102: try { try decoder.decodeSingularInt32Field(value: &_storage._zenzaiInferLimit) }()
        case 103: try { try decoder.decodeSingularBoolField(value: &_storage._zenzaiContextualMode) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._zenzaiVersionConfig) }()
        case 105: try { try decoder.decodeSingularBoolField(value: &_storage._useZenzaiCustomWeight) }()
        case 106: try { try decoder.decodeSingularStringField(value: &_storage._zenzaiWeightPath) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._profileName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileName, fieldNumber: 5)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileID, fieldNumber: 6)
      }
      if _storage._useDefaultInputUiSettings != false {
        try visitor.visitSingularBoolField(value: _storage._useDefaultInputUiSettings, fieldNumber: 10)
      }
      if _storage._autoConvertMode != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._autoConvertMode, fieldNumber: 11)
      }
      if _storage._auxTextMode != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._auxTextMode, fieldNumber: 12)
      }
      if _storage._suggestionListMode != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._suggestionListMode, fieldNumber: 13)
      }
      if _storage._useRichSuggestion != false {
        try visitor.visitSingularBoolField(value: _storage._useRichSuggestion, fieldNumber: 14)
      }
      if _storage._numSuggestions != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numSuggestions, fieldNumber: 15)
      }
      if _storage._useDefaultConversionUiSettings != false {
        try visitor.visitSingularBoolField(value: _storage._useDefaultConversionUiSettings, fieldNumber: 20)
      }
      if _storage._numCandidatesPerPage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numCandidatesPerPage, fieldNumber: 21)
      }
      if _storage._useRichCandidates != false {
        try visitor.visitSingularBoolField(value: _storage._useRichCandidates, fieldNumber: 22)
      }
      if _storage._stopStoreNewHistory != false {
        try visitor.visitSingularBoolField(value: _storage._stopStoreNewHistory, fieldNumber: 23)
      }
      if _storage._useDefaultHistorySettings != false {
        try visitor.visitSingularBoolField(value: _storage._useDefaultHistorySettings, fieldNumber: 30)
      }
      if _storage._useProfileIndependentHistory != false {
        try visitor.visitSingularBoolField(value: _storage._useProfileIndependentHistory, fieldNumber: 31)
      }
      if _storage._useInputHistory != false {
        try visitor.visitSingularBoolField(value: _storage._useInputHistory, fieldNumber: 32)
      }
      if _storage._useDefaultSpecialConversionSettings != false {
        try visitor.visitSingularBoolField(value: _storage._useDefaultSpecialConversionSettings, fieldNumber: 40)
      }
      try { if let v = _storage._specialConversionMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      } }()
      if _storage._useDefaultTableSettings != false {
        try visitor.visitSingularBoolField(value: _storage._useDefaultTableSettings, fieldNumber: 50)
      }
      if !_storage._enabledTables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enabledTables, fieldNumber: 51)
      }
      if _storage._useDefaultZenzaiSettings != false {
        try visitor.visitSingularBoolField(value: _storage._useDefaultZenzaiSettings, fieldNumber: 100)
      }
      if _storage._zenzaiEnable != false {
        try visitor.visitSingularBoolField(value: _storage._zenzaiEnable, fieldNumber: 101)
      }
      if _storage._zenzaiInferLimit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._zenzaiInferLimit, fieldNumber: 102)
      }
      if _storage._zenzaiContextualMode != false {
        try visitor.visitSingularBoolField(value: _storage._zenzaiContextualMode, fieldNumber: 103)
      }
      try { if let v = _storage._zenzaiVersionConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
      if _storage._useZenzaiCustomWeight != false {
        try visitor.visitSingularBoolField(value: _storage._useZenzaiCustomWeight, fieldNumber: 105)
      }
      if !_storage._zenzaiWeightPath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._zenzaiWeightPath, fieldNumber: 106)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile, rhs: Hazkey_Config_Profile) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._profileName != rhs_storage._profileName {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        if _storage._useDefaultInputUiSettings != rhs_storage._useDefaultInputUiSettings {return false}
        if _storage._autoConvertMode != rhs_storage._autoConvertMode {return false}
        if _storage._auxTextMode != rhs_storage._auxTextMode {return false}
        if _storage._suggestionListMode != rhs_storage._suggestionListMode {return false}
        if _storage._useRichSuggestion != rhs_storage._useRichSuggestion {return false}
        if _storage._numSuggestions != rhs_storage._numSuggestions {return false}
        if _storage._useDefaultConversionUiSettings != rhs_storage._useDefaultConversionUiSettings {return false}
        if _storage._numCandidatesPerPage != rhs_storage._numCandidatesPerPage {return false}
        if _storage._useRichCandidates != rhs_storage._useRichCandidates {return false}
        if _storage._useDefaultHistorySettings != rhs_storage._useDefaultHistorySettings {return false}
        if _storage._useProfileIndependentHistory != rhs_storage._useProfileIndependentHistory {return false}
        if _storage._useInputHistory != rhs_storage._useInputHistory {return false}
        if _storage._stopStoreNewHistory != rhs_storage._stopStoreNewHistory {return false}
        if _storage._useDefaultSpecialConversionSettings != rhs_storage._useDefaultSpecialConversionSettings {return false}
        if _storage._specialConversionMode != rhs_storage._specialConversionMode {return false}
        if _storage._useDefaultTableSettings != rhs_storage._useDefaultTableSettings {return false}
        if _storage._enabledTables != rhs_storage._enabledTables {return false}
        if _storage._useDefaultZenzaiSettings != rhs_storage._useDefaultZenzaiSettings {return false}
        if _storage._zenzaiEnable != rhs_storage._zenzaiEnable {return false}
        if _storage._zenzaiInferLimit != rhs_storage._zenzaiInferLimit {return false}
        if _storage._zenzaiContextualMode != rhs_storage._zenzaiContextualMode {return false}
        if _storage._zenzaiVersionConfig != rhs_storage._zenzaiVersionConfig {return false}
        if _storage._useZenzaiCustomWeight != rhs_storage._useZenzaiCustomWeight {return false}
        if _storage._zenzaiWeightPath != rhs_storage._zenzaiWeightPath {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.AutoConvertMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTO_CONVERT_MODE_UNSPECIFIED"),
    1: .same(proto: "AUTO_CONVERT_DISABLED"),
    2: .same(proto: "AUTO_CONVERT_ALWAYS"),
    3: .same(proto: "AUTO_CONVERT_FOR_MULTIPLE_CHARS"),
  ]
}

extension Hazkey_Config_Profile.AuxTextMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUX_TEXT_MODE_UNSPECIFIED"),
    1: .same(proto: "AUX_TEXT_DISABLED"),
    2: .same(proto: "AUX_TEXT_SHOW_ALWAYS"),
    3: .same(proto: "AUX_TEXT_SHOW_WHEN_CURSOR_NOT_AT_END"),
  ]
}

extension Hazkey_Config_Profile.SuggestionListMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUGGESTION_LIST_MODE_UNSPECIFIED"),
    1: .same(proto: "SUGGESTION_LIST_DISABLED"),
    2: .same(proto: "SUGGESTION_LIST_SHOW_NORMAL_RESULTS"),
    3: .same(proto: "SUGGESTION_LIST_SHOW_PREDICTIVE_RESULTS"),
  ]
}

extension Hazkey_Config_Profile.SpecialConversionMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.protoMessageName + ".SpecialConversionMode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "comma_separated_number"),
    2: .standard(proto: "mail_domain"),
    3: .same(proto: "calender"),
    4: .same(proto: "time"),
    5: .standard(proto: "roman_typography"),
    6: .standard(proto: "unicode_codepoint"),
    7: .standard(proto: "hazkey_version"),
    50: .standard(proto: "halfwidth_katakana"),
    51: .standard(proto: "extended_emoji"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.commaSeparatedNumber) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.mailDomain) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.calender) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.time) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.romanTypography) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.unicodeCodepoint) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.hazkeyVersion) }()
      case 50: try { try decoder.decodeSingularBoolField(value: &self.halfwidthKatakana) }()
      case 51: try { try decoder.decodeSingularBoolField(value: &self.extendedEmoji) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.commaSeparatedNumber != false {
      try visitor.visitSingularBoolField(value: self.commaSeparatedNumber, fieldNumber: 1)
    }
    if self.mailDomain != false {
      try visitor.visitSingularBoolField(value: self.mailDomain, fieldNumber: 2)
    }
    if self.calender != false {
      try visitor.visitSingularBoolField(value: self.calender, fieldNumber: 3)
    }
    if self.time != false {
      try visitor.visitSingularBoolField(value: self.time, fieldNumber: 4)
    }
    if self.romanTypography != false {
      try visitor.visitSingularBoolField(value: self.romanTypography, fieldNumber: 5)
    }
    if self.unicodeCodepoint != false {
      try visitor.visitSingularBoolField(value: self.unicodeCodepoint, fieldNumber: 6)
    }
    if self.hazkeyVersion != false {
      try visitor.visitSingularBoolField(value: self.hazkeyVersion, fieldNumber: 7)
    }
    if self.halfwidthKatakana != false {
      try visitor.visitSingularBoolField(value: self.halfwidthKatakana, fieldNumber: 50)
    }
    if self.extendedEmoji != false {
      try visitor.visitSingularBoolField(value: self.extendedEmoji, fieldNumber: 51)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.SpecialConversionMode, rhs: Hazkey_Config_Profile.SpecialConversionMode) -> Bool {
    if lhs.commaSeparatedNumber != rhs.commaSeparatedNumber {return false}
    if lhs.mailDomain != rhs.mailDomain {return false}
    if lhs.calender != rhs.calender {return false}
    if lhs.time != rhs.time {return false}
    if lhs.romanTypography != rhs.romanTypography {return false}
    if lhs.unicodeCodepoint != rhs.unicodeCodepoint {return false}
    if lhs.hazkeyVersion != rhs.hazkeyVersion {return false}
    if lhs.halfwidthKatakana != rhs.halfwidthKatakana {return false}
    if lhs.extendedEmoji != rhs.extendedEmoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.EnabledInputTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.protoMessageName + ".EnabledInputTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "is_built_in"),
    3: .same(proto: "filename"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isBuiltIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filename) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.isBuiltIn != false {
      try visitor.visitSingularBoolField(value: self.isBuiltIn, fieldNumber: 2)
    }
    if !self.filename.isEmpty {
      try visitor.visitSingularStringField(value: self.filename, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.EnabledInputTable, rhs: Hazkey_Config_Profile.EnabledInputTable) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.isBuiltIn != rhs.isBuiltIn {return false}
    if lhs.filename != rhs.filename {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.protoMessageName + ".ZenzaiVersionConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v1"),
    2: .same(proto: "v2"),
    3: .same(proto: "v3"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Hazkey_Config_Profile.ZenzaiVersionConfig.V1?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v1(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v1(v)
        }
      }()
      case 2: try {
        var v: Hazkey_Config_Profile.ZenzaiVersionConfig.V2?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v2(v)
        }
      }()
      case 3: try {
        var v: Hazkey_Config_Profile.ZenzaiVersionConfig.V3?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v3(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v3(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.version {
    case .v1?: try {
      guard case .v1(let v)? = self.version else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .v2?: try {
      guard case .v2(let v)? = self.version else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .v3?: try {
      guard case .v3(let v)? = self.version else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig.V1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.ZenzaiVersionConfig.protoMessageName + ".V1"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V1, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V1) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig.V2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.ZenzaiVersionConfig.protoMessageName + ".V2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profile.isEmpty {
      try visitor.visitSingularStringField(value: self.profile, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V2, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V2) -> Bool {
    if lhs.profile != rhs.profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig.V3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.ZenzaiVersionConfig.protoMessageName + ".V3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
    2: .same(proto: "topic"),
    3: .same(proto: "style"),
    4: .same(proto: "preference"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profile) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.topic) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.style) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.preference) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profile.isEmpty {
      try visitor.visitSingularStringField(value: self.profile, fieldNumber: 1)
    }
    if !self.topic.isEmpty {
      try visitor.visitSingularStringField(value: self.topic, fieldNumber: 2)
    }
    if !self.style.isEmpty {
      try visitor.visitSingularStringField(value: self.style, fieldNumber: 3)
    }
    if !self.preference.isEmpty {
      try visitor.visitSingularStringField(value: self.preference, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V3, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V3) -> Bool {
    if lhs.profile != rhs.profile {return false}
    if lhs.topic != rhs.topic {return false}
    if lhs.style != rhs.style {return false}
    if lhs.preference != rhs.preference {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_GetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_GetConfig, rhs: Hazkey_Config_GetConfig) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_SetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_hashes"),
    2: .same(proto: "profiles"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fileHashes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileHashes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileHashes, fieldNumber: 1)
    }
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_SetConfig, rhs: Hazkey_Config_SetConfig) -> Bool {
    if lhs.fileHashes != rhs.fileHashes {return false}
    if lhs.profiles != rhs.profiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_GetDefaultProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDefaultProfile"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_GetDefaultProfile, rhs: Hazkey_Config_GetDefaultProfile) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_ClearAllHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearAllHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "profile_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profileID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profileID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_ClearAllHistory, rhs: Hazkey_Config_ClearAllHistory) -> Bool {
    if lhs.profileID != rhs.profileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_CurrentConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurrentConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_hashes"),
    2: .same(proto: "profiles"),
    3: .standard(proto: "available_tables"),
    4: .standard(proto: "is_zenzai_available"),
    5: .standard(proto: "xdg_config_home_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fileHashes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.availableTables) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isZenzaiAvailable) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.xdgConfigHomePath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileHashes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileHashes, fieldNumber: 1)
    }
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 2)
    }
    if !self.availableTables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availableTables, fieldNumber: 3)
    }
    if self.isZenzaiAvailable != false {
      try visitor.visitSingularBoolField(value: self.isZenzaiAvailable, fieldNumber: 4)
    }
    if !self.xdgConfigHomePath.isEmpty {
      try visitor.visitSingularStringField(value: self.xdgConfigHomePath, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_CurrentConfig, rhs: Hazkey_Config_CurrentConfig) -> Bool {
    if lhs.fileHashes != rhs.fileHashes {return false}
    if lhs.profiles != rhs.profiles {return false}
    if lhs.availableTables != rhs.availableTables {return false}
    if lhs.isZenzaiAvailable != rhs.isZenzaiAvailable {return false}
    if lhs.xdgConfigHomePath != rhs.xdgConfigHomePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
