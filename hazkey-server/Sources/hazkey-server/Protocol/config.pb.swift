// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Hazkey_Config_FileHash: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var sha256Sum: String = String()

  var type: Hazkey_Config_FileHash.ConfigFileType = .configMain

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ConfigFileType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case configMain // = 0
    case inputTable // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .configMain
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .configMain
      case 1: self = .inputTable
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .configMain: return 0
      case .inputTable: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_FileHash.ConfigFileType] = [
      .configMain,
      .inputTable,
    ]

  }

  init() {}
}

struct Hazkey_Config_InputTable: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var isBuiltIn: Bool = false

  var filename: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_Profile: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serverVersion: String {
    get {return _storage._serverVersion ?? String()}
    set {_uniqueStorage()._serverVersion = newValue}
  }
  /// Returns true if `serverVersion` has been explicitly set.
  var hasServerVersion: Bool {return _storage._serverVersion != nil}
  /// Clears the value of `serverVersion`. Subsequent reads from it will return its default value.
  mutating func clearServerVersion() {_uniqueStorage()._serverVersion = nil}

  var profileName: String {
    get {return _storage._profileName}
    set {_uniqueStorage()._profileName = newValue}
  }

  var profileID: String {
    get {return _storage._profileID}
    set {_uniqueStorage()._profileID = newValue}
  }

  var useDefaultInputUiSettings: Bool {
    get {return _storage._useDefaultInputUiSettings ?? false}
    set {_uniqueStorage()._useDefaultInputUiSettings = newValue}
  }
  /// Returns true if `useDefaultInputUiSettings` has been explicitly set.
  var hasUseDefaultInputUiSettings: Bool {return _storage._useDefaultInputUiSettings != nil}
  /// Clears the value of `useDefaultInputUiSettings`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultInputUiSettings() {_uniqueStorage()._useDefaultInputUiSettings = nil}

  var autoConvertMode: Hazkey_Config_Profile.AutoConvertMode {
    get {return _storage._autoConvertMode ?? .unspecified}
    set {_uniqueStorage()._autoConvertMode = newValue}
  }
  /// Returns true if `autoConvertMode` has been explicitly set.
  var hasAutoConvertMode: Bool {return _storage._autoConvertMode != nil}
  /// Clears the value of `autoConvertMode`. Subsequent reads from it will return its default value.
  mutating func clearAutoConvertMode() {_uniqueStorage()._autoConvertMode = nil}

  var auxTextMode: Hazkey_Config_Profile.AuxTextMode {
    get {return _storage._auxTextMode ?? .unspecified}
    set {_uniqueStorage()._auxTextMode = newValue}
  }
  /// Returns true if `auxTextMode` has been explicitly set.
  var hasAuxTextMode: Bool {return _storage._auxTextMode != nil}
  /// Clears the value of `auxTextMode`. Subsequent reads from it will return its default value.
  mutating func clearAuxTextMode() {_uniqueStorage()._auxTextMode = nil}

  var suggestionListMode: Hazkey_Config_Profile.SuggestionListMode {
    get {return _storage._suggestionListMode ?? .unspecified}
    set {_uniqueStorage()._suggestionListMode = newValue}
  }
  /// Returns true if `suggestionListMode` has been explicitly set.
  var hasSuggestionListMode: Bool {return _storage._suggestionListMode != nil}
  /// Clears the value of `suggestionListMode`. Subsequent reads from it will return its default value.
  mutating func clearSuggestionListMode() {_uniqueStorage()._suggestionListMode = nil}

  var useRichSuggestion: Bool {
    get {return _storage._useRichSuggestion ?? false}
    set {_uniqueStorage()._useRichSuggestion = newValue}
  }
  /// Returns true if `useRichSuggestion` has been explicitly set.
  var hasUseRichSuggestion: Bool {return _storage._useRichSuggestion != nil}
  /// Clears the value of `useRichSuggestion`. Subsequent reads from it will return its default value.
  mutating func clearUseRichSuggestion() {_uniqueStorage()._useRichSuggestion = nil}

  var numSuggestions: Int32 {
    get {return _storage._numSuggestions ?? 0}
    set {_uniqueStorage()._numSuggestions = newValue}
  }
  /// Returns true if `numSuggestions` has been explicitly set.
  var hasNumSuggestions: Bool {return _storage._numSuggestions != nil}
  /// Clears the value of `numSuggestions`. Subsequent reads from it will return its default value.
  mutating func clearNumSuggestions() {_uniqueStorage()._numSuggestions = nil}

  var useDefaultConversionUiSettings: Bool {
    get {return _storage._useDefaultConversionUiSettings ?? false}
    set {_uniqueStorage()._useDefaultConversionUiSettings = newValue}
  }
  /// Returns true if `useDefaultConversionUiSettings` has been explicitly set.
  var hasUseDefaultConversionUiSettings: Bool {return _storage._useDefaultConversionUiSettings != nil}
  /// Clears the value of `useDefaultConversionUiSettings`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultConversionUiSettings() {_uniqueStorage()._useDefaultConversionUiSettings = nil}

  var numCandidatesPerPage: Int32 {
    get {return _storage._numCandidatesPerPage ?? 0}
    set {_uniqueStorage()._numCandidatesPerPage = newValue}
  }
  /// Returns true if `numCandidatesPerPage` has been explicitly set.
  var hasNumCandidatesPerPage: Bool {return _storage._numCandidatesPerPage != nil}
  /// Clears the value of `numCandidatesPerPage`. Subsequent reads from it will return its default value.
  mutating func clearNumCandidatesPerPage() {_uniqueStorage()._numCandidatesPerPage = nil}

  var useRichCandidates: Bool {
    get {return _storage._useRichCandidates ?? false}
    set {_uniqueStorage()._useRichCandidates = newValue}
  }
  /// Returns true if `useRichCandidates` has been explicitly set.
  var hasUseRichCandidates: Bool {return _storage._useRichCandidates != nil}
  /// Clears the value of `useRichCandidates`. Subsequent reads from it will return its default value.
  mutating func clearUseRichCandidates() {_uniqueStorage()._useRichCandidates = nil}

  var useDefaultHistorySettings: Bool {
    get {return _storage._useDefaultHistorySettings ?? false}
    set {_uniqueStorage()._useDefaultHistorySettings = newValue}
  }
  /// Returns true if `useDefaultHistorySettings` has been explicitly set.
  var hasUseDefaultHistorySettings: Bool {return _storage._useDefaultHistorySettings != nil}
  /// Clears the value of `useDefaultHistorySettings`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultHistorySettings() {_uniqueStorage()._useDefaultHistorySettings = nil}

  var useProfileIndependentHistory: Bool {
    get {return _storage._useProfileIndependentHistory ?? false}
    set {_uniqueStorage()._useProfileIndependentHistory = newValue}
  }
  /// Returns true if `useProfileIndependentHistory` has been explicitly set.
  var hasUseProfileIndependentHistory: Bool {return _storage._useProfileIndependentHistory != nil}
  /// Clears the value of `useProfileIndependentHistory`. Subsequent reads from it will return its default value.
  mutating func clearUseProfileIndependentHistory() {_uniqueStorage()._useProfileIndependentHistory = nil}

  var useInputHistory: Bool {
    get {return _storage._useInputHistory ?? false}
    set {_uniqueStorage()._useInputHistory = newValue}
  }
  /// Returns true if `useInputHistory` has been explicitly set.
  var hasUseInputHistory: Bool {return _storage._useInputHistory != nil}
  /// Clears the value of `useInputHistory`. Subsequent reads from it will return its default value.
  mutating func clearUseInputHistory() {_uniqueStorage()._useInputHistory = nil}

  var stopStoreNewHistory: Bool {
    get {return _storage._stopStoreNewHistory ?? false}
    set {_uniqueStorage()._stopStoreNewHistory = newValue}
  }
  /// Returns true if `stopStoreNewHistory` has been explicitly set.
  var hasStopStoreNewHistory: Bool {return _storage._stopStoreNewHistory != nil}
  /// Clears the value of `stopStoreNewHistory`. Subsequent reads from it will return its default value.
  mutating func clearStopStoreNewHistory() {_uniqueStorage()._stopStoreNewHistory = nil}

  var useDefaultSpecialConversionSettings: Bool {
    get {return _storage._useDefaultSpecialConversionSettings ?? false}
    set {_uniqueStorage()._useDefaultSpecialConversionSettings = newValue}
  }
  /// Returns true if `useDefaultSpecialConversionSettings` has been explicitly set.
  var hasUseDefaultSpecialConversionSettings: Bool {return _storage._useDefaultSpecialConversionSettings != nil}
  /// Clears the value of `useDefaultSpecialConversionSettings`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultSpecialConversionSettings() {_uniqueStorage()._useDefaultSpecialConversionSettings = nil}

  var specialConversionMode: Hazkey_Config_Profile.SpecialConversionMode {
    get {return _storage._specialConversionMode ?? Hazkey_Config_Profile.SpecialConversionMode()}
    set {_uniqueStorage()._specialConversionMode = newValue}
  }
  /// Returns true if `specialConversionMode` has been explicitly set.
  var hasSpecialConversionMode: Bool {return _storage._specialConversionMode != nil}
  /// Clears the value of `specialConversionMode`. Subsequent reads from it will return its default value.
  mutating func clearSpecialConversionMode() {_uniqueStorage()._specialConversionMode = nil}

  var useDefaultTableSettings: Bool {
    get {return _storage._useDefaultTableSettings ?? false}
    set {_uniqueStorage()._useDefaultTableSettings = newValue}
  }
  /// Returns true if `useDefaultTableSettings` has been explicitly set.
  var hasUseDefaultTableSettings: Bool {return _storage._useDefaultTableSettings != nil}
  /// Clears the value of `useDefaultTableSettings`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultTableSettings() {_uniqueStorage()._useDefaultTableSettings = nil}

  var enabledTables: [Hazkey_Config_Profile.EnabledInputTable] {
    get {return _storage._enabledTables}
    set {_uniqueStorage()._enabledTables = newValue}
  }

  var useDefaultZenzaiSettings: Bool {
    get {return _storage._useDefaultZenzaiSettings ?? false}
    set {_uniqueStorage()._useDefaultZenzaiSettings = newValue}
  }
  /// Returns true if `useDefaultZenzaiSettings` has been explicitly set.
  var hasUseDefaultZenzaiSettings: Bool {return _storage._useDefaultZenzaiSettings != nil}
  /// Clears the value of `useDefaultZenzaiSettings`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultZenzaiSettings() {_uniqueStorage()._useDefaultZenzaiSettings = nil}

  var zenzaiEnable: Bool {
    get {return _storage._zenzaiEnable ?? false}
    set {_uniqueStorage()._zenzaiEnable = newValue}
  }
  /// Returns true if `zenzaiEnable` has been explicitly set.
  var hasZenzaiEnable: Bool {return _storage._zenzaiEnable != nil}
  /// Clears the value of `zenzaiEnable`. Subsequent reads from it will return its default value.
  mutating func clearZenzaiEnable() {_uniqueStorage()._zenzaiEnable = nil}

  var zenzaiInferLimit: Int32 {
    get {return _storage._zenzaiInferLimit ?? 0}
    set {_uniqueStorage()._zenzaiInferLimit = newValue}
  }
  /// Returns true if `zenzaiInferLimit` has been explicitly set.
  var hasZenzaiInferLimit: Bool {return _storage._zenzaiInferLimit != nil}
  /// Clears the value of `zenzaiInferLimit`. Subsequent reads from it will return its default value.
  mutating func clearZenzaiInferLimit() {_uniqueStorage()._zenzaiInferLimit = nil}

  var zenzaiContextualMode: Bool {
    get {return _storage._zenzaiContextualMode ?? false}
    set {_uniqueStorage()._zenzaiContextualMode = newValue}
  }
  /// Returns true if `zenzaiContextualMode` has been explicitly set.
  var hasZenzaiContextualMode: Bool {return _storage._zenzaiContextualMode != nil}
  /// Clears the value of `zenzaiContextualMode`. Subsequent reads from it will return its default value.
  mutating func clearZenzaiContextualMode() {_uniqueStorage()._zenzaiContextualMode = nil}

  var zenzaiVersionConfig: Hazkey_Config_Profile.ZenzaiVersionConfig {
    get {return _storage._zenzaiVersionConfig ?? Hazkey_Config_Profile.ZenzaiVersionConfig()}
    set {_uniqueStorage()._zenzaiVersionConfig = newValue}
  }
  /// Returns true if `zenzaiVersionConfig` has been explicitly set.
  var hasZenzaiVersionConfig: Bool {return _storage._zenzaiVersionConfig != nil}
  /// Clears the value of `zenzaiVersionConfig`. Subsequent reads from it will return its default value.
  mutating func clearZenzaiVersionConfig() {_uniqueStorage()._zenzaiVersionConfig = nil}

  var useZenzaiCustomWeight: Bool {
    get {return _storage._useZenzaiCustomWeight ?? false}
    set {_uniqueStorage()._useZenzaiCustomWeight = newValue}
  }
  /// Returns true if `useZenzaiCustomWeight` has been explicitly set.
  var hasUseZenzaiCustomWeight: Bool {return _storage._useZenzaiCustomWeight != nil}
  /// Clears the value of `useZenzaiCustomWeight`. Subsequent reads from it will return its default value.
  mutating func clearUseZenzaiCustomWeight() {_uniqueStorage()._useZenzaiCustomWeight = nil}

  var zenzaiWeightPath: String {
    get {return _storage._zenzaiWeightPath ?? String()}
    set {_uniqueStorage()._zenzaiWeightPath = newValue}
  }
  /// Returns true if `zenzaiWeightPath` has been explicitly set.
  var hasZenzaiWeightPath: Bool {return _storage._zenzaiWeightPath != nil}
  /// Clears the value of `zenzaiWeightPath`. Subsequent reads from it will return its default value.
  mutating func clearZenzaiWeightPath() {_uniqueStorage()._zenzaiWeightPath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AutoConvertMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unspecified // = 0
    case autoConvertDisabled // = 1
    case autoConvertAlways // = 2
    case autoConvertForMultipleChars // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .autoConvertDisabled
      case 2: self = .autoConvertAlways
      case 3: self = .autoConvertForMultipleChars
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .autoConvertDisabled: return 1
      case .autoConvertAlways: return 2
      case .autoConvertForMultipleChars: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_Profile.AutoConvertMode] = [
      .unspecified,
      .autoConvertDisabled,
      .autoConvertAlways,
      .autoConvertForMultipleChars,
    ]

  }

  enum AuxTextMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unspecified // = 0
    case auxTextDisabled // = 1
    case auxTextShowAlways // = 2
    case auxTextShowWhenCursorNotAtEnd // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .auxTextDisabled
      case 2: self = .auxTextShowAlways
      case 3: self = .auxTextShowWhenCursorNotAtEnd
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .auxTextDisabled: return 1
      case .auxTextShowAlways: return 2
      case .auxTextShowWhenCursorNotAtEnd: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_Profile.AuxTextMode] = [
      .unspecified,
      .auxTextDisabled,
      .auxTextShowAlways,
      .auxTextShowWhenCursorNotAtEnd,
    ]

  }

  enum SuggestionListMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unspecified // = 0
    case suggestionListDisabled // = 1
    case suggestionListShowNormalResults // = 2
    case suggestionListShowPredictiveResults // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .suggestionListDisabled
      case 2: self = .suggestionListShowNormalResults
      case 3: self = .suggestionListShowPredictiveResults
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .suggestionListDisabled: return 1
      case .suggestionListShowNormalResults: return 2
      case .suggestionListShowPredictiveResults: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Hazkey_Config_Profile.SuggestionListMode] = [
      .unspecified,
      .suggestionListDisabled,
      .suggestionListShowNormalResults,
      .suggestionListShowPredictiveResults,
    ]

  }

  struct SpecialConversionMode: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var commaSeparatedNumber: Bool {
      get {return _commaSeparatedNumber ?? false}
      set {_commaSeparatedNumber = newValue}
    }
    /// Returns true if `commaSeparatedNumber` has been explicitly set.
    var hasCommaSeparatedNumber: Bool {return self._commaSeparatedNumber != nil}
    /// Clears the value of `commaSeparatedNumber`. Subsequent reads from it will return its default value.
    mutating func clearCommaSeparatedNumber() {self._commaSeparatedNumber = nil}

    var mailDomain: Bool {
      get {return _mailDomain ?? false}
      set {_mailDomain = newValue}
    }
    /// Returns true if `mailDomain` has been explicitly set.
    var hasMailDomain: Bool {return self._mailDomain != nil}
    /// Clears the value of `mailDomain`. Subsequent reads from it will return its default value.
    mutating func clearMailDomain() {self._mailDomain = nil}

    var calendar: Bool {
      get {return _calendar ?? false}
      set {_calendar = newValue}
    }
    /// Returns true if `calendar` has been explicitly set.
    var hasCalendar: Bool {return self._calendar != nil}
    /// Clears the value of `calendar`. Subsequent reads from it will return its default value.
    mutating func clearCalendar() {self._calendar = nil}

    var time: Bool {
      get {return _time ?? false}
      set {_time = newValue}
    }
    /// Returns true if `time` has been explicitly set.
    var hasTime: Bool {return self._time != nil}
    /// Clears the value of `time`. Subsequent reads from it will return its default value.
    mutating func clearTime() {self._time = nil}

    var romanTypography: Bool {
      get {return _romanTypography ?? false}
      set {_romanTypography = newValue}
    }
    /// Returns true if `romanTypography` has been explicitly set.
    var hasRomanTypography: Bool {return self._romanTypography != nil}
    /// Clears the value of `romanTypography`. Subsequent reads from it will return its default value.
    mutating func clearRomanTypography() {self._romanTypography = nil}

    var unicodeCodepoint: Bool {
      get {return _unicodeCodepoint ?? false}
      set {_unicodeCodepoint = newValue}
    }
    /// Returns true if `unicodeCodepoint` has been explicitly set.
    var hasUnicodeCodepoint: Bool {return self._unicodeCodepoint != nil}
    /// Clears the value of `unicodeCodepoint`. Subsequent reads from it will return its default value.
    mutating func clearUnicodeCodepoint() {self._unicodeCodepoint = nil}

    var hazkeyVersion: Bool {
      get {return _hazkeyVersion ?? false}
      set {_hazkeyVersion = newValue}
    }
    /// Returns true if `hazkeyVersion` has been explicitly set.
    var hasHazkeyVersion: Bool {return self._hazkeyVersion != nil}
    /// Clears the value of `hazkeyVersion`. Subsequent reads from it will return its default value.
    mutating func clearHazkeyVersion() {self._hazkeyVersion = nil}

    var halfwidthKatakana: Bool {
      get {return _halfwidthKatakana ?? false}
      set {_halfwidthKatakana = newValue}
    }
    /// Returns true if `halfwidthKatakana` has been explicitly set.
    var hasHalfwidthKatakana: Bool {return self._halfwidthKatakana != nil}
    /// Clears the value of `halfwidthKatakana`. Subsequent reads from it will return its default value.
    mutating func clearHalfwidthKatakana() {self._halfwidthKatakana = nil}

    var extendedEmoji: Bool {
      get {return _extendedEmoji ?? false}
      set {_extendedEmoji = newValue}
    }
    /// Returns true if `extendedEmoji` has been explicitly set.
    var hasExtendedEmoji: Bool {return self._extendedEmoji != nil}
    /// Clears the value of `extendedEmoji`. Subsequent reads from it will return its default value.
    mutating func clearExtendedEmoji() {self._extendedEmoji = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _commaSeparatedNumber: Bool? = nil
    fileprivate var _mailDomain: Bool? = nil
    fileprivate var _calendar: Bool? = nil
    fileprivate var _time: Bool? = nil
    fileprivate var _romanTypography: Bool? = nil
    fileprivate var _unicodeCodepoint: Bool? = nil
    fileprivate var _hazkeyVersion: Bool? = nil
    fileprivate var _halfwidthKatakana: Bool? = nil
    fileprivate var _extendedEmoji: Bool? = nil
  }

  struct EnabledInputTable: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {self._name = nil}

    var isBuiltIn: Bool {
      get {return _isBuiltIn ?? false}
      set {_isBuiltIn = newValue}
    }
    /// Returns true if `isBuiltIn` has been explicitly set.
    var hasIsBuiltIn: Bool {return self._isBuiltIn != nil}
    /// Clears the value of `isBuiltIn`. Subsequent reads from it will return its default value.
    mutating func clearIsBuiltIn() {self._isBuiltIn = nil}

    var filename: String {
      get {return _filename ?? String()}
      set {_filename = newValue}
    }
    /// Returns true if `filename` has been explicitly set.
    var hasFilename: Bool {return self._filename != nil}
    /// Clears the value of `filename`. Subsequent reads from it will return its default value.
    mutating func clearFilename() {self._filename = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _name: String? = nil
    fileprivate var _isBuiltIn: Bool? = nil
    fileprivate var _filename: String? = nil
  }

  struct ZenzaiVersionConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: Hazkey_Config_Profile.ZenzaiVersionConfig.OneOf_Version? = nil

    var v1: Hazkey_Config_Profile.ZenzaiVersionConfig.V1 {
      get {
        if case .v1(let v)? = version {return v}
        return Hazkey_Config_Profile.ZenzaiVersionConfig.V1()
      }
      set {version = .v1(newValue)}
    }

    var v2: Hazkey_Config_Profile.ZenzaiVersionConfig.V2 {
      get {
        if case .v2(let v)? = version {return v}
        return Hazkey_Config_Profile.ZenzaiVersionConfig.V2()
      }
      set {version = .v2(newValue)}
    }

    var v3: Hazkey_Config_Profile.ZenzaiVersionConfig.V3 {
      get {
        if case .v3(let v)? = version {return v}
        return Hazkey_Config_Profile.ZenzaiVersionConfig.V3()
      }
      set {version = .v3(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Version: Equatable, Sendable {
      case v1(Hazkey_Config_Profile.ZenzaiVersionConfig.V1)
      case v2(Hazkey_Config_Profile.ZenzaiVersionConfig.V2)
      case v3(Hazkey_Config_Profile.ZenzaiVersionConfig.V3)

    }

    struct V1: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct V2: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var profile: String {
        get {return _profile ?? String()}
        set {_profile = newValue}
      }
      /// Returns true if `profile` has been explicitly set.
      var hasProfile: Bool {return self._profile != nil}
      /// Clears the value of `profile`. Subsequent reads from it will return its default value.
      mutating func clearProfile() {self._profile = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _profile: String? = nil
    }

    struct V3: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var profile: String {
        get {return _profile ?? String()}
        set {_profile = newValue}
      }
      /// Returns true if `profile` has been explicitly set.
      var hasProfile: Bool {return self._profile != nil}
      /// Clears the value of `profile`. Subsequent reads from it will return its default value.
      mutating func clearProfile() {self._profile = nil}

      var topic: String {
        get {return _topic ?? String()}
        set {_topic = newValue}
      }
      /// Returns true if `topic` has been explicitly set.
      var hasTopic: Bool {return self._topic != nil}
      /// Clears the value of `topic`. Subsequent reads from it will return its default value.
      mutating func clearTopic() {self._topic = nil}

      var style: String {
        get {return _style ?? String()}
        set {_style = newValue}
      }
      /// Returns true if `style` has been explicitly set.
      var hasStyle: Bool {return self._style != nil}
      /// Clears the value of `style`. Subsequent reads from it will return its default value.
      mutating func clearStyle() {self._style = nil}

      var preference: String {
        get {return _preference ?? String()}
        set {_preference = newValue}
      }
      /// Returns true if `preference` has been explicitly set.
      var hasPreference: Bool {return self._preference != nil}
      /// Clears the value of `preference`. Subsequent reads from it will return its default value.
      mutating func clearPreference() {self._preference = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _profile: String? = nil
      fileprivate var _topic: String? = nil
      fileprivate var _style: String? = nil
      fileprivate var _preference: String? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Hazkey_Config_GetConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_SetConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fileHashes: [Hazkey_Config_FileHash] = []

  var profiles: [Hazkey_Config_Profile] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_GetDefaultProfile: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_ClearAllHistory: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var profileID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Hazkey_Config_CurrentConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fileHashes: [Hazkey_Config_FileHash] = []

  var profiles: [Hazkey_Config_Profile] = []

  var availableTables: [Hazkey_Config_InputTable] = []

  var isZenzaiAvailable: Bool = false

  var xdgConfigHomePath: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "hazkey.config"

extension Hazkey_Config_FileHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FileHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "sha256sum"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sha256Sum) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.sha256Sum.isEmpty {
      try visitor.visitSingularStringField(value: self.sha256Sum, fieldNumber: 2)
    }
    if self.type != .configMain {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_FileHash, rhs: Hazkey_Config_FileHash) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.sha256Sum != rhs.sha256Sum {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_FileHash.ConfigFileType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONFIG_MAIN"),
    1: .same(proto: "INPUT_TABLE"),
  ]
}

extension Hazkey_Config_InputTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InputTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "is_built_in"),
    3: .same(proto: "filename"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isBuiltIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filename) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.isBuiltIn != false {
      try visitor.visitSingularBoolField(value: self.isBuiltIn, fieldNumber: 2)
    }
    if !self.filename.isEmpty {
      try visitor.visitSingularStringField(value: self.filename, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_InputTable, rhs: Hazkey_Config_InputTable) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.isBuiltIn != rhs.isBuiltIn {return false}
    if lhs.filename != rhs.filename {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "server_version"),
    5: .standard(proto: "profile_name"),
    6: .standard(proto: "profile_id"),
    10: .standard(proto: "use_default_input_ui_settings"),
    11: .standard(proto: "auto_convert_mode"),
    12: .standard(proto: "aux_text_mode"),
    13: .standard(proto: "suggestion_list_mode"),
    14: .standard(proto: "use_rich_suggestion"),
    15: .standard(proto: "num_suggestions"),
    20: .standard(proto: "use_default_conversion_ui_settings"),
    21: .standard(proto: "num_candidates_per_page"),
    22: .standard(proto: "use_rich_candidates"),
    30: .standard(proto: "use_default_history_settings"),
    31: .standard(proto: "use_profile_independent_history"),
    32: .standard(proto: "use_input_history"),
    23: .standard(proto: "stop_store_new_history"),
    40: .standard(proto: "use_default_special_conversion_settings"),
    41: .standard(proto: "special_conversion_mode"),
    50: .standard(proto: "use_default_table_settings"),
    51: .standard(proto: "enabled_tables"),
    100: .standard(proto: "use_default_zenzai_settings"),
    101: .standard(proto: "zenzai_enable"),
    102: .standard(proto: "zenzai_infer_limit"),
    103: .standard(proto: "zenzai_contextual_mode"),
    104: .standard(proto: "zenzai_version_config"),
    105: .standard(proto: "use_zenzai_custom_weight"),
    106: .standard(proto: "zenzai_weight_path"),
  ]

  fileprivate class _StorageClass {
    var _serverVersion: String? = nil
    var _profileName: String = String()
    var _profileID: String = String()
    var _useDefaultInputUiSettings: Bool? = nil
    var _autoConvertMode: Hazkey_Config_Profile.AutoConvertMode? = nil
    var _auxTextMode: Hazkey_Config_Profile.AuxTextMode? = nil
    var _suggestionListMode: Hazkey_Config_Profile.SuggestionListMode? = nil
    var _useRichSuggestion: Bool? = nil
    var _numSuggestions: Int32? = nil
    var _useDefaultConversionUiSettings: Bool? = nil
    var _numCandidatesPerPage: Int32? = nil
    var _useRichCandidates: Bool? = nil
    var _useDefaultHistorySettings: Bool? = nil
    var _useProfileIndependentHistory: Bool? = nil
    var _useInputHistory: Bool? = nil
    var _stopStoreNewHistory: Bool? = nil
    var _useDefaultSpecialConversionSettings: Bool? = nil
    var _specialConversionMode: Hazkey_Config_Profile.SpecialConversionMode? = nil
    var _useDefaultTableSettings: Bool? = nil
    var _enabledTables: [Hazkey_Config_Profile.EnabledInputTable] = []
    var _useDefaultZenzaiSettings: Bool? = nil
    var _zenzaiEnable: Bool? = nil
    var _zenzaiInferLimit: Int32? = nil
    var _zenzaiContextualMode: Bool? = nil
    var _zenzaiVersionConfig: Hazkey_Config_Profile.ZenzaiVersionConfig? = nil
    var _useZenzaiCustomWeight: Bool? = nil
    var _zenzaiWeightPath: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serverVersion = source._serverVersion
      _profileName = source._profileName
      _profileID = source._profileID
      _useDefaultInputUiSettings = source._useDefaultInputUiSettings
      _autoConvertMode = source._autoConvertMode
      _auxTextMode = source._auxTextMode
      _suggestionListMode = source._suggestionListMode
      _useRichSuggestion = source._useRichSuggestion
      _numSuggestions = source._numSuggestions
      _useDefaultConversionUiSettings = source._useDefaultConversionUiSettings
      _numCandidatesPerPage = source._numCandidatesPerPage
      _useRichCandidates = source._useRichCandidates
      _useDefaultHistorySettings = source._useDefaultHistorySettings
      _useProfileIndependentHistory = source._useProfileIndependentHistory
      _useInputHistory = source._useInputHistory
      _stopStoreNewHistory = source._stopStoreNewHistory
      _useDefaultSpecialConversionSettings = source._useDefaultSpecialConversionSettings
      _specialConversionMode = source._specialConversionMode
      _useDefaultTableSettings = source._useDefaultTableSettings
      _enabledTables = source._enabledTables
      _useDefaultZenzaiSettings = source._useDefaultZenzaiSettings
      _zenzaiEnable = source._zenzaiEnable
      _zenzaiInferLimit = source._zenzaiInferLimit
      _zenzaiContextualMode = source._zenzaiContextualMode
      _zenzaiVersionConfig = source._zenzaiVersionConfig
      _useZenzaiCustomWeight = source._useZenzaiCustomWeight
      _zenzaiWeightPath = source._zenzaiWeightPath
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._serverVersion) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._profileName) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._profileID) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultInputUiSettings) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._autoConvertMode) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._auxTextMode) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._suggestionListMode) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._useRichSuggestion) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._numSuggestions) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultConversionUiSettings) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._numCandidatesPerPage) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._useRichCandidates) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._stopStoreNewHistory) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultHistorySettings) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._useProfileIndependentHistory) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._useInputHistory) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultSpecialConversionSettings) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._specialConversionMode) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultTableSettings) }()
        case 51: try { try decoder.decodeRepeatedMessageField(value: &_storage._enabledTables) }()
        case 100: try { try decoder.decodeSingularBoolField(value: &_storage._useDefaultZenzaiSettings) }()
        case 101: try { try decoder.decodeSingularBoolField(value: &_storage._zenzaiEnable) }()
        case 102: try { try decoder.decodeSingularInt32Field(value: &_storage._zenzaiInferLimit) }()
        case 103: try { try decoder.decodeSingularBoolField(value: &_storage._zenzaiContextualMode) }()
        case 104: try { try decoder.decodeSingularMessageField(value: &_storage._zenzaiVersionConfig) }()
        case 105: try { try decoder.decodeSingularBoolField(value: &_storage._useZenzaiCustomWeight) }()
        case 106: try { try decoder.decodeSingularStringField(value: &_storage._zenzaiWeightPath) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._serverVersion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      if !_storage._profileName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileName, fieldNumber: 5)
      }
      if !_storage._profileID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._profileID, fieldNumber: 6)
      }
      try { if let v = _storage._useDefaultInputUiSettings {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._autoConvertMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._auxTextMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._suggestionListMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._useRichSuggestion {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._numSuggestions {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._useDefaultConversionUiSettings {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._numCandidatesPerPage {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._useRichCandidates {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._stopStoreNewHistory {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._useDefaultHistorySettings {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._useProfileIndependentHistory {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._useInputHistory {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._useDefaultSpecialConversionSettings {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._specialConversionMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._useDefaultTableSettings {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 50)
      } }()
      if !_storage._enabledTables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enabledTables, fieldNumber: 51)
      }
      try { if let v = _storage._useDefaultZenzaiSettings {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 100)
      } }()
      try { if let v = _storage._zenzaiEnable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._zenzaiInferLimit {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._zenzaiContextualMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._zenzaiVersionConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._useZenzaiCustomWeight {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 105)
      } }()
      try { if let v = _storage._zenzaiWeightPath {
        try visitor.visitSingularStringField(value: v, fieldNumber: 106)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile, rhs: Hazkey_Config_Profile) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serverVersion != rhs_storage._serverVersion {return false}
        if _storage._profileName != rhs_storage._profileName {return false}
        if _storage._profileID != rhs_storage._profileID {return false}
        if _storage._useDefaultInputUiSettings != rhs_storage._useDefaultInputUiSettings {return false}
        if _storage._autoConvertMode != rhs_storage._autoConvertMode {return false}
        if _storage._auxTextMode != rhs_storage._auxTextMode {return false}
        if _storage._suggestionListMode != rhs_storage._suggestionListMode {return false}
        if _storage._useRichSuggestion != rhs_storage._useRichSuggestion {return false}
        if _storage._numSuggestions != rhs_storage._numSuggestions {return false}
        if _storage._useDefaultConversionUiSettings != rhs_storage._useDefaultConversionUiSettings {return false}
        if _storage._numCandidatesPerPage != rhs_storage._numCandidatesPerPage {return false}
        if _storage._useRichCandidates != rhs_storage._useRichCandidates {return false}
        if _storage._useDefaultHistorySettings != rhs_storage._useDefaultHistorySettings {return false}
        if _storage._useProfileIndependentHistory != rhs_storage._useProfileIndependentHistory {return false}
        if _storage._useInputHistory != rhs_storage._useInputHistory {return false}
        if _storage._stopStoreNewHistory != rhs_storage._stopStoreNewHistory {return false}
        if _storage._useDefaultSpecialConversionSettings != rhs_storage._useDefaultSpecialConversionSettings {return false}
        if _storage._specialConversionMode != rhs_storage._specialConversionMode {return false}
        if _storage._useDefaultTableSettings != rhs_storage._useDefaultTableSettings {return false}
        if _storage._enabledTables != rhs_storage._enabledTables {return false}
        if _storage._useDefaultZenzaiSettings != rhs_storage._useDefaultZenzaiSettings {return false}
        if _storage._zenzaiEnable != rhs_storage._zenzaiEnable {return false}
        if _storage._zenzaiInferLimit != rhs_storage._zenzaiInferLimit {return false}
        if _storage._zenzaiContextualMode != rhs_storage._zenzaiContextualMode {return false}
        if _storage._zenzaiVersionConfig != rhs_storage._zenzaiVersionConfig {return false}
        if _storage._useZenzaiCustomWeight != rhs_storage._useZenzaiCustomWeight {return false}
        if _storage._zenzaiWeightPath != rhs_storage._zenzaiWeightPath {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.AutoConvertMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTO_CONVERT_MODE_UNSPECIFIED"),
    1: .same(proto: "AUTO_CONVERT_DISABLED"),
    2: .same(proto: "AUTO_CONVERT_ALWAYS"),
    3: .same(proto: "AUTO_CONVERT_FOR_MULTIPLE_CHARS"),
  ]
}

extension Hazkey_Config_Profile.AuxTextMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUX_TEXT_MODE_UNSPECIFIED"),
    1: .same(proto: "AUX_TEXT_DISABLED"),
    2: .same(proto: "AUX_TEXT_SHOW_ALWAYS"),
    3: .same(proto: "AUX_TEXT_SHOW_WHEN_CURSOR_NOT_AT_END"),
  ]
}

extension Hazkey_Config_Profile.SuggestionListMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUGGESTION_LIST_MODE_UNSPECIFIED"),
    1: .same(proto: "SUGGESTION_LIST_DISABLED"),
    2: .same(proto: "SUGGESTION_LIST_SHOW_NORMAL_RESULTS"),
    3: .same(proto: "SUGGESTION_LIST_SHOW_PREDICTIVE_RESULTS"),
  ]
}

extension Hazkey_Config_Profile.SpecialConversionMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.protoMessageName + ".SpecialConversionMode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "comma_separated_number"),
    2: .standard(proto: "mail_domain"),
    3: .same(proto: "calendar"),
    4: .same(proto: "time"),
    5: .standard(proto: "roman_typography"),
    6: .standard(proto: "unicode_codepoint"),
    7: .standard(proto: "hazkey_version"),
    50: .standard(proto: "halfwidth_katakana"),
    51: .standard(proto: "extended_emoji"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._commaSeparatedNumber) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._mailDomain) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._calendar) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._time) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._romanTypography) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._unicodeCodepoint) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._hazkeyVersion) }()
      case 50: try { try decoder.decodeSingularBoolField(value: &self._halfwidthKatakana) }()
      case 51: try { try decoder.decodeSingularBoolField(value: &self._extendedEmoji) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commaSeparatedNumber {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._mailDomain {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._calendar {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._romanTypography {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._unicodeCodepoint {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._hazkeyVersion {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._halfwidthKatakana {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 50)
    } }()
    try { if let v = self._extendedEmoji {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 51)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.SpecialConversionMode, rhs: Hazkey_Config_Profile.SpecialConversionMode) -> Bool {
    if lhs._commaSeparatedNumber != rhs._commaSeparatedNumber {return false}
    if lhs._mailDomain != rhs._mailDomain {return false}
    if lhs._calendar != rhs._calendar {return false}
    if lhs._time != rhs._time {return false}
    if lhs._romanTypography != rhs._romanTypography {return false}
    if lhs._unicodeCodepoint != rhs._unicodeCodepoint {return false}
    if lhs._hazkeyVersion != rhs._hazkeyVersion {return false}
    if lhs._halfwidthKatakana != rhs._halfwidthKatakana {return false}
    if lhs._extendedEmoji != rhs._extendedEmoji {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.EnabledInputTable: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.protoMessageName + ".EnabledInputTable"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "is_built_in"),
    3: .same(proto: "filename"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._isBuiltIn) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._filename) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._isBuiltIn {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._filename {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.EnabledInputTable, rhs: Hazkey_Config_Profile.EnabledInputTable) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._isBuiltIn != rhs._isBuiltIn {return false}
    if lhs._filename != rhs._filename {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.protoMessageName + ".ZenzaiVersionConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v1"),
    2: .same(proto: "v2"),
    3: .same(proto: "v3"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Hazkey_Config_Profile.ZenzaiVersionConfig.V1?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v1(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v1(v)
        }
      }()
      case 2: try {
        var v: Hazkey_Config_Profile.ZenzaiVersionConfig.V2?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v2(v)
        }
      }()
      case 3: try {
        var v: Hazkey_Config_Profile.ZenzaiVersionConfig.V3?
        var hadOneofValue = false
        if let current = self.version {
          hadOneofValue = true
          if case .v3(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.version = .v3(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.version {
    case .v1?: try {
      guard case .v1(let v)? = self.version else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .v2?: try {
      guard case .v2(let v)? = self.version else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .v3?: try {
      guard case .v3(let v)? = self.version else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig.V1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.ZenzaiVersionConfig.protoMessageName + ".V1"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V1, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V1) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig.V2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.ZenzaiVersionConfig.protoMessageName + ".V2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._profile) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._profile {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V2, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V2) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_Profile.ZenzaiVersionConfig.V3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Hazkey_Config_Profile.ZenzaiVersionConfig.protoMessageName + ".V3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "profile"),
    2: .same(proto: "topic"),
    3: .same(proto: "style"),
    4: .same(proto: "preference"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._profile) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._topic) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._style) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._preference) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._profile {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._topic {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._preference {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V3, rhs: Hazkey_Config_Profile.ZenzaiVersionConfig.V3) -> Bool {
    if lhs._profile != rhs._profile {return false}
    if lhs._topic != rhs._topic {return false}
    if lhs._style != rhs._style {return false}
    if lhs._preference != rhs._preference {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_GetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_GetConfig, rhs: Hazkey_Config_GetConfig) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_SetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_hashes"),
    2: .same(proto: "profiles"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fileHashes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileHashes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileHashes, fieldNumber: 1)
    }
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_SetConfig, rhs: Hazkey_Config_SetConfig) -> Bool {
    if lhs.fileHashes != rhs.fileHashes {return false}
    if lhs.profiles != rhs.profiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_GetDefaultProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetDefaultProfile"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_GetDefaultProfile, rhs: Hazkey_Config_GetDefaultProfile) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_ClearAllHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearAllHistory"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "profile_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.profileID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.profileID.isEmpty {
      try visitor.visitSingularStringField(value: self.profileID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_ClearAllHistory, rhs: Hazkey_Config_ClearAllHistory) -> Bool {
    if lhs.profileID != rhs.profileID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_Config_CurrentConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurrentConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "file_hashes"),
    2: .same(proto: "profiles"),
    3: .standard(proto: "available_tables"),
    4: .standard(proto: "is_zenzai_available"),
    5: .standard(proto: "xdg_config_home_path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fileHashes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.profiles) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.availableTables) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.isZenzaiAvailable) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.xdgConfigHomePath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fileHashes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileHashes, fieldNumber: 1)
    }
    if !self.profiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.profiles, fieldNumber: 2)
    }
    if !self.availableTables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.availableTables, fieldNumber: 3)
    }
    if self.isZenzaiAvailable != false {
      try visitor.visitSingularBoolField(value: self.isZenzaiAvailable, fieldNumber: 4)
    }
    if !self.xdgConfigHomePath.isEmpty {
      try visitor.visitSingularStringField(value: self.xdgConfigHomePath, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_Config_CurrentConfig, rhs: Hazkey_Config_CurrentConfig) -> Bool {
    if lhs.fileHashes != rhs.fileHashes {return false}
    if lhs.profiles != rhs.profiles {return false}
    if lhs.availableTables != rhs.availableTables {return false}
    if lhs.isZenzaiAvailable != rhs.isZenzaiAvailable {return false}
    if lhs.xdgConfigHomePath != rhs.xdgConfigHomePath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
