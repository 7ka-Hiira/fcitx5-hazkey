// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: base.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Hazkey_StatusCode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case success // = 0
  case failed // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .success
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 1: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .success: return 0
    case .failed: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Hazkey_StatusCode] = [
    .success,
    .failed,
  ]

}

struct Hazkey_RequestEnvelope: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Hazkey_RequestEnvelope.OneOf_Payload? = nil

  var newComposingText: Hazkey_Commands_NewComposingText {
    get {
      if case .newComposingText(let v)? = payload {return v}
      return Hazkey_Commands_NewComposingText()
    }
    set {payload = .newComposingText(newValue)}
  }

  var setConfig: Hazkey_Commands_SetConfig {
    get {
      if case .setConfig(let v)? = payload {return v}
      return Hazkey_Commands_SetConfig()
    }
    set {payload = .setConfig(newValue)}
  }

  var setContext: Hazkey_Commands_SetContext {
    get {
      if case .setContext(let v)? = payload {return v}
      return Hazkey_Commands_SetContext()
    }
    set {payload = .setContext(newValue)}
  }

  var inputChar: Hazkey_Commands_InputChar {
    get {
      if case .inputChar(let v)? = payload {return v}
      return Hazkey_Commands_InputChar()
    }
    set {payload = .inputChar(newValue)}
  }

  var moveCursor: Hazkey_Commands_MoveCursor {
    get {
      if case .moveCursor(let v)? = payload {return v}
      return Hazkey_Commands_MoveCursor()
    }
    set {payload = .moveCursor(newValue)}
  }

  var prefixComplete: Hazkey_Commands_PrefixComplete {
    get {
      if case .prefixComplete(let v)? = payload {return v}
      return Hazkey_Commands_PrefixComplete()
    }
    set {payload = .prefixComplete(newValue)}
  }

  var deleteLeft: Hazkey_Commands_DeleteLeft {
    get {
      if case .deleteLeft(let v)? = payload {return v}
      return Hazkey_Commands_DeleteLeft()
    }
    set {payload = .deleteLeft(newValue)}
  }

  var deleteRight: Hazkey_Commands_DeleteRight {
    get {
      if case .deleteRight(let v)? = payload {return v}
      return Hazkey_Commands_DeleteRight()
    }
    set {payload = .deleteRight(newValue)}
  }

  var getComposingString: Hazkey_Commands_GetComposingString {
    get {
      if case .getComposingString(let v)? = payload {return v}
      return Hazkey_Commands_GetComposingString()
    }
    set {payload = .getComposingString(newValue)}
  }

  var getHiraganaWithCursor: Hazkey_Commands_GetHiraganaWithCursor {
    get {
      if case .getHiraganaWithCursor(let v)? = payload {return v}
      return Hazkey_Commands_GetHiraganaWithCursor()
    }
    set {payload = .getHiraganaWithCursor(newValue)}
  }

  var getCandidates: Hazkey_Commands_GetCandidates {
    get {
      if case .getCandidates(let v)? = payload {return v}
      return Hazkey_Commands_GetCandidates()
    }
    set {payload = .getCandidates(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable, Sendable {
    case newComposingText(Hazkey_Commands_NewComposingText)
    case setConfig(Hazkey_Commands_SetConfig)
    case setContext(Hazkey_Commands_SetContext)
    case inputChar(Hazkey_Commands_InputChar)
    case moveCursor(Hazkey_Commands_MoveCursor)
    case prefixComplete(Hazkey_Commands_PrefixComplete)
    case deleteLeft(Hazkey_Commands_DeleteLeft)
    case deleteRight(Hazkey_Commands_DeleteRight)
    case getComposingString(Hazkey_Commands_GetComposingString)
    case getHiraganaWithCursor(Hazkey_Commands_GetHiraganaWithCursor)
    case getCandidates(Hazkey_Commands_GetCandidates)

  }

  init() {}
}

struct Hazkey_ResponseEnvelope: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Hazkey_StatusCode = .success

  var errorMessage: String = String()

  var payload: Hazkey_ResponseEnvelope.OneOf_Payload? = nil

  var text: String {
    get {
      if case .text(let v)? = payload {return v}
      return String()
    }
    set {payload = .text(newValue)}
  }

  var candidates: Hazkey_Commands_CandidatesResult {
    get {
      if case .candidates(let v)? = payload {return v}
      return Hazkey_Commands_CandidatesResult()
    }
    set {payload = .candidates(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable, Sendable {
    case text(String)
    case candidates(Hazkey_Commands_CandidatesResult)

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "hazkey"

extension Hazkey_StatusCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    1: .same(proto: "FAILED"),
  ]
}

extension Hazkey_RequestEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestEnvelope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_composing_text"),
    2: .standard(proto: "set_config"),
    3: .standard(proto: "set_context"),
    4: .standard(proto: "input_char"),
    5: .standard(proto: "move_cursor"),
    6: .standard(proto: "prefix_complete"),
    7: .standard(proto: "delete_left"),
    8: .standard(proto: "delete_right"),
    9: .standard(proto: "get_composing_string"),
    10: .standard(proto: "get_hiragana_with_cursor"),
    11: .standard(proto: "get_candidates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Hazkey_Commands_NewComposingText?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .newComposingText(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .newComposingText(v)
        }
      }()
      case 2: try {
        var v: Hazkey_Commands_SetConfig?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .setConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .setConfig(v)
        }
      }()
      case 3: try {
        var v: Hazkey_Commands_SetContext?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .setContext(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .setContext(v)
        }
      }()
      case 4: try {
        var v: Hazkey_Commands_InputChar?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .inputChar(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .inputChar(v)
        }
      }()
      case 5: try {
        var v: Hazkey_Commands_MoveCursor?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .moveCursor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .moveCursor(v)
        }
      }()
      case 6: try {
        var v: Hazkey_Commands_PrefixComplete?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .prefixComplete(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .prefixComplete(v)
        }
      }()
      case 7: try {
        var v: Hazkey_Commands_DeleteLeft?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .deleteLeft(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .deleteLeft(v)
        }
      }()
      case 8: try {
        var v: Hazkey_Commands_DeleteRight?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .deleteRight(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .deleteRight(v)
        }
      }()
      case 9: try {
        var v: Hazkey_Commands_GetComposingString?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getComposingString(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getComposingString(v)
        }
      }()
      case 10: try {
        var v: Hazkey_Commands_GetHiraganaWithCursor?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getHiraganaWithCursor(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getHiraganaWithCursor(v)
        }
      }()
      case 11: try {
        var v: Hazkey_Commands_GetCandidates?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getCandidates(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getCandidates(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.payload {
    case .newComposingText?: try {
      guard case .newComposingText(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .setConfig?: try {
      guard case .setConfig(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .setContext?: try {
      guard case .setContext(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .inputChar?: try {
      guard case .inputChar(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .moveCursor?: try {
      guard case .moveCursor(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .prefixComplete?: try {
      guard case .prefixComplete(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .deleteLeft?: try {
      guard case .deleteLeft(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .deleteRight?: try {
      guard case .deleteRight(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .getComposingString?: try {
      guard case .getComposingString(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .getHiraganaWithCursor?: try {
      guard case .getHiraganaWithCursor(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .getCandidates?: try {
      guard case .getCandidates(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_RequestEnvelope, rhs: Hazkey_RequestEnvelope) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Hazkey_ResponseEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseEnvelope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "error_message"),
    3: .same(proto: "text"),
    4: .same(proto: "candidates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .text(v)
        }
      }()
      case 4: try {
        var v: Hazkey_Commands_CandidatesResult?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .candidates(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .candidates(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.status != .success {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 2)
    }
    switch self.payload {
    case .text?: try {
      guard case .text(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .candidates?: try {
      guard case .candidates(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Hazkey_ResponseEnvelope, rhs: Hazkey_ResponseEnvelope) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
