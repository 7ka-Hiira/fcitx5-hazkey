// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base.proto
// Protobuf C++ Version: 6.31.1

#ifndef base_2eproto_2epb_2eh
#define base_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "commands.pb.h"
#include "config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_base_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_base_2eproto;
}  // extern "C"
namespace hazkey {
enum StatusCode : int;
extern const uint32_t StatusCode_internal_data_[];
class RequestEnvelope;
struct RequestEnvelopeDefaultTypeInternal;
extern RequestEnvelopeDefaultTypeInternal _RequestEnvelope_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull RequestEnvelope_class_data_;
class ResponseEnvelope;
struct ResponseEnvelopeDefaultTypeInternal;
extern ResponseEnvelopeDefaultTypeInternal _ResponseEnvelope_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ResponseEnvelope_class_data_;
}  // namespace hazkey
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::hazkey::StatusCode_internal_data_>
    internal::EnumTraitsImpl::value<::hazkey::StatusCode>;
}  // namespace protobuf
}  // namespace google

namespace hazkey {
enum StatusCode : int {
  UNSPECIFIED = 0,
  SUCCESS = 1,
  FAILED = 2,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      ::std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t StatusCode_internal_data_[];
inline constexpr StatusCode StatusCode_MIN =
    static_cast<StatusCode>(0);
inline constexpr StatusCode StatusCode_MAX =
    static_cast<StatusCode>(2);
inline bool StatusCode_IsValid(int value) {
  return 0 <= value && value <= 2;
}
inline constexpr int StatusCode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL StatusCode_descriptor();
template <typename T>
const ::std::string& StatusCode_Name(T value) {
  static_assert(::std::is_same<T, StatusCode>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to StatusCode_Name().");
  return StatusCode_Name(static_cast<StatusCode>(value));
}
template <>
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StatusCode_descriptor, 0, 2>(
      static_cast<int>(value));
}
inline bool StatusCode_Parse(
    ::absl::string_view name, StatusCode* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(StatusCode_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class ResponseEnvelope final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:hazkey.ResponseEnvelope) */ {
 public:
  inline ResponseEnvelope() : ResponseEnvelope(nullptr) {}
  ~ResponseEnvelope() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ResponseEnvelope* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ResponseEnvelope));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseEnvelope(::google::protobuf::internal::ConstantInitialized);

  inline ResponseEnvelope(const ResponseEnvelope& from) : ResponseEnvelope(nullptr, from) {}
  inline ResponseEnvelope(ResponseEnvelope&& from) noexcept
      : ResponseEnvelope(nullptr, ::std::move(from)) {}
  inline ResponseEnvelope& operator=(const ResponseEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseEnvelope& operator=(ResponseEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseEnvelope& default_instance() {
    return *reinterpret_cast<const ResponseEnvelope*>(
        &_ResponseEnvelope_default_instance_);
  }
  enum PayloadCase {
    kText = 3,
    kCandidates = 4,
    kTextWithCursor = 5,
    kCurrentConfig = 100,
    PAYLOAD_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ResponseEnvelope& a, ResponseEnvelope& b) { a.Swap(&b); }
  inline void Swap(ResponseEnvelope* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseEnvelope* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseEnvelope* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ResponseEnvelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseEnvelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResponseEnvelope& from) { ResponseEnvelope::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ResponseEnvelope* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "hazkey.ResponseEnvelope"; }

 protected:
  explicit ResponseEnvelope(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ResponseEnvelope(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ResponseEnvelope& from);
  ResponseEnvelope(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ResponseEnvelope&& from) noexcept
      : ResponseEnvelope(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
    kTextFieldNumber = 3,
    kCandidatesFieldNumber = 4,
    kTextWithCursorFieldNumber = 5,
    kCurrentConfigFieldNumber = 100,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const ::std::string& error_message() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_error_message();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_error_message();
  void set_allocated_error_message(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_error_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_error_message();

  public:
  // .hazkey.StatusCode status = 1;
  void clear_status() ;
  ::hazkey::StatusCode status() const;
  void set_status(::hazkey::StatusCode value);

  private:
  ::hazkey::StatusCode _internal_status() const;
  void _internal_set_status(::hazkey::StatusCode value);

  public:
  // string text = 3;
  bool has_text() const;
  void clear_text() ;
  const ::std::string& text() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_text();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_text();
  void set_allocated_text(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_text() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_text(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_text();

  public:
  // .hazkey.commands.CandidatesResult candidates = 4;
  bool has_candidates() const;
  private:
  bool _internal_has_candidates() const;

  public:
  void clear_candidates() ;
  const ::hazkey::commands::CandidatesResult& candidates() const;
  [[nodiscard]] ::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE release_candidates();
  ::hazkey::commands::CandidatesResult* PROTOBUF_NONNULL mutable_candidates();
  void set_allocated_candidates(::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_candidates(::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE value);
  ::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE unsafe_arena_release_candidates();

  private:
  const ::hazkey::commands::CandidatesResult& _internal_candidates() const;
  ::hazkey::commands::CandidatesResult* PROTOBUF_NONNULL _internal_mutable_candidates();

  public:
  // .hazkey.commands.TextWithCursor text_with_cursor = 5;
  bool has_text_with_cursor() const;
  private:
  bool _internal_has_text_with_cursor() const;

  public:
  void clear_text_with_cursor() ;
  const ::hazkey::commands::TextWithCursor& text_with_cursor() const;
  [[nodiscard]] ::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE release_text_with_cursor();
  ::hazkey::commands::TextWithCursor* PROTOBUF_NONNULL mutable_text_with_cursor();
  void set_allocated_text_with_cursor(::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_text_with_cursor(::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE value);
  ::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE unsafe_arena_release_text_with_cursor();

  private:
  const ::hazkey::commands::TextWithCursor& _internal_text_with_cursor() const;
  ::hazkey::commands::TextWithCursor* PROTOBUF_NONNULL _internal_mutable_text_with_cursor();

  public:
  // .hazkey.config.CurrentConfig current_config = 100;
  bool has_current_config() const;
  private:
  bool _internal_has_current_config() const;

  public:
  void clear_current_config() ;
  const ::hazkey::config::CurrentConfig& current_config() const;
  [[nodiscard]] ::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE release_current_config();
  ::hazkey::config::CurrentConfig* PROTOBUF_NONNULL mutable_current_config();
  void set_allocated_current_config(::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_current_config(::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE value);
  ::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE unsafe_arena_release_current_config();

  private:
  const ::hazkey::config::CurrentConfig& _internal_current_config() const;
  ::hazkey::config::CurrentConfig* PROTOBUF_NONNULL _internal_mutable_current_config();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:hazkey.ResponseEnvelope)
 private:
  class _Internal;
  void set_has_text();
  void set_has_candidates();
  void set_has_text_with_cursor();
  void set_has_current_config();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 6,
                                   3, 49,
                                   7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ResponseEnvelope& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    int status_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr text_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE candidates_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE text_with_cursor_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE current_config_;
    } payload_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ResponseEnvelope_class_data_;
// -------------------------------------------------------------------

class RequestEnvelope final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:hazkey.RequestEnvelope) */ {
 public:
  inline RequestEnvelope() : RequestEnvelope(nullptr) {}
  ~RequestEnvelope() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RequestEnvelope* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RequestEnvelope));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RequestEnvelope(::google::protobuf::internal::ConstantInitialized);

  inline RequestEnvelope(const RequestEnvelope& from) : RequestEnvelope(nullptr, from) {}
  inline RequestEnvelope(RequestEnvelope&& from) noexcept
      : RequestEnvelope(nullptr, ::std::move(from)) {}
  inline RequestEnvelope& operator=(const RequestEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestEnvelope& operator=(RequestEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestEnvelope& default_instance() {
    return *reinterpret_cast<const RequestEnvelope*>(
        &_RequestEnvelope_default_instance_);
  }
  enum PayloadCase {
    kNewComposingText = 1,
    kSetContext = 2,
    kInputChar = 3,
    kMoveCursor = 4,
    kPrefixComplete = 5,
    kDeleteLeft = 6,
    kDeleteRight = 7,
    kGetComposingString = 8,
    kGetHiraganaWithCursor = 9,
    kGetCandidates = 10,
    kGetConfig = 100,
    kSetConfig = 101,
    kGetDefaultProfile = 102,
    kClearAllHistory = 103,
    PAYLOAD_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RequestEnvelope& a, RequestEnvelope& b) { a.Swap(&b); }
  inline void Swap(RequestEnvelope* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestEnvelope* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestEnvelope* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RequestEnvelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RequestEnvelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RequestEnvelope& from) { RequestEnvelope::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RequestEnvelope* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "hazkey.RequestEnvelope"; }

 protected:
  explicit RequestEnvelope(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  RequestEnvelope(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RequestEnvelope& from);
  RequestEnvelope(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, RequestEnvelope&& from) noexcept
      : RequestEnvelope(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewComposingTextFieldNumber = 1,
    kSetContextFieldNumber = 2,
    kInputCharFieldNumber = 3,
    kMoveCursorFieldNumber = 4,
    kPrefixCompleteFieldNumber = 5,
    kDeleteLeftFieldNumber = 6,
    kDeleteRightFieldNumber = 7,
    kGetComposingStringFieldNumber = 8,
    kGetHiraganaWithCursorFieldNumber = 9,
    kGetCandidatesFieldNumber = 10,
    kGetConfigFieldNumber = 100,
    kSetConfigFieldNumber = 101,
    kGetDefaultProfileFieldNumber = 102,
    kClearAllHistoryFieldNumber = 103,
  };
  // .hazkey.commands.NewComposingText new_composing_text = 1;
  bool has_new_composing_text() const;
  private:
  bool _internal_has_new_composing_text() const;

  public:
  void clear_new_composing_text() ;
  const ::hazkey::commands::NewComposingText& new_composing_text() const;
  [[nodiscard]] ::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE release_new_composing_text();
  ::hazkey::commands::NewComposingText* PROTOBUF_NONNULL mutable_new_composing_text();
  void set_allocated_new_composing_text(::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_new_composing_text(::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE value);
  ::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE unsafe_arena_release_new_composing_text();

  private:
  const ::hazkey::commands::NewComposingText& _internal_new_composing_text() const;
  ::hazkey::commands::NewComposingText* PROTOBUF_NONNULL _internal_mutable_new_composing_text();

  public:
  // .hazkey.commands.SetContext set_context = 2;
  bool has_set_context() const;
  private:
  bool _internal_has_set_context() const;

  public:
  void clear_set_context() ;
  const ::hazkey::commands::SetContext& set_context() const;
  [[nodiscard]] ::hazkey::commands::SetContext* PROTOBUF_NULLABLE release_set_context();
  ::hazkey::commands::SetContext* PROTOBUF_NONNULL mutable_set_context();
  void set_allocated_set_context(::hazkey::commands::SetContext* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_set_context(::hazkey::commands::SetContext* PROTOBUF_NULLABLE value);
  ::hazkey::commands::SetContext* PROTOBUF_NULLABLE unsafe_arena_release_set_context();

  private:
  const ::hazkey::commands::SetContext& _internal_set_context() const;
  ::hazkey::commands::SetContext* PROTOBUF_NONNULL _internal_mutable_set_context();

  public:
  // .hazkey.commands.InputChar input_char = 3;
  bool has_input_char() const;
  private:
  bool _internal_has_input_char() const;

  public:
  void clear_input_char() ;
  const ::hazkey::commands::InputChar& input_char() const;
  [[nodiscard]] ::hazkey::commands::InputChar* PROTOBUF_NULLABLE release_input_char();
  ::hazkey::commands::InputChar* PROTOBUF_NONNULL mutable_input_char();
  void set_allocated_input_char(::hazkey::commands::InputChar* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_input_char(::hazkey::commands::InputChar* PROTOBUF_NULLABLE value);
  ::hazkey::commands::InputChar* PROTOBUF_NULLABLE unsafe_arena_release_input_char();

  private:
  const ::hazkey::commands::InputChar& _internal_input_char() const;
  ::hazkey::commands::InputChar* PROTOBUF_NONNULL _internal_mutable_input_char();

  public:
  // .hazkey.commands.MoveCursor move_cursor = 4;
  bool has_move_cursor() const;
  private:
  bool _internal_has_move_cursor() const;

  public:
  void clear_move_cursor() ;
  const ::hazkey::commands::MoveCursor& move_cursor() const;
  [[nodiscard]] ::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE release_move_cursor();
  ::hazkey::commands::MoveCursor* PROTOBUF_NONNULL mutable_move_cursor();
  void set_allocated_move_cursor(::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_move_cursor(::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE value);
  ::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE unsafe_arena_release_move_cursor();

  private:
  const ::hazkey::commands::MoveCursor& _internal_move_cursor() const;
  ::hazkey::commands::MoveCursor* PROTOBUF_NONNULL _internal_mutable_move_cursor();

  public:
  // .hazkey.commands.PrefixComplete prefix_complete = 5;
  bool has_prefix_complete() const;
  private:
  bool _internal_has_prefix_complete() const;

  public:
  void clear_prefix_complete() ;
  const ::hazkey::commands::PrefixComplete& prefix_complete() const;
  [[nodiscard]] ::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE release_prefix_complete();
  ::hazkey::commands::PrefixComplete* PROTOBUF_NONNULL mutable_prefix_complete();
  void set_allocated_prefix_complete(::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_prefix_complete(::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE value);
  ::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE unsafe_arena_release_prefix_complete();

  private:
  const ::hazkey::commands::PrefixComplete& _internal_prefix_complete() const;
  ::hazkey::commands::PrefixComplete* PROTOBUF_NONNULL _internal_mutable_prefix_complete();

  public:
  // .hazkey.commands.DeleteLeft delete_left = 6;
  bool has_delete_left() const;
  private:
  bool _internal_has_delete_left() const;

  public:
  void clear_delete_left() ;
  const ::hazkey::commands::DeleteLeft& delete_left() const;
  [[nodiscard]] ::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE release_delete_left();
  ::hazkey::commands::DeleteLeft* PROTOBUF_NONNULL mutable_delete_left();
  void set_allocated_delete_left(::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_delete_left(::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE value);
  ::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE unsafe_arena_release_delete_left();

  private:
  const ::hazkey::commands::DeleteLeft& _internal_delete_left() const;
  ::hazkey::commands::DeleteLeft* PROTOBUF_NONNULL _internal_mutable_delete_left();

  public:
  // .hazkey.commands.DeleteRight delete_right = 7;
  bool has_delete_right() const;
  private:
  bool _internal_has_delete_right() const;

  public:
  void clear_delete_right() ;
  const ::hazkey::commands::DeleteRight& delete_right() const;
  [[nodiscard]] ::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE release_delete_right();
  ::hazkey::commands::DeleteRight* PROTOBUF_NONNULL mutable_delete_right();
  void set_allocated_delete_right(::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_delete_right(::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE value);
  ::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE unsafe_arena_release_delete_right();

  private:
  const ::hazkey::commands::DeleteRight& _internal_delete_right() const;
  ::hazkey::commands::DeleteRight* PROTOBUF_NONNULL _internal_mutable_delete_right();

  public:
  // .hazkey.commands.GetComposingString get_composing_string = 8;
  bool has_get_composing_string() const;
  private:
  bool _internal_has_get_composing_string() const;

  public:
  void clear_get_composing_string() ;
  const ::hazkey::commands::GetComposingString& get_composing_string() const;
  [[nodiscard]] ::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE release_get_composing_string();
  ::hazkey::commands::GetComposingString* PROTOBUF_NONNULL mutable_get_composing_string();
  void set_allocated_get_composing_string(::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_get_composing_string(::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE value);
  ::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE unsafe_arena_release_get_composing_string();

  private:
  const ::hazkey::commands::GetComposingString& _internal_get_composing_string() const;
  ::hazkey::commands::GetComposingString* PROTOBUF_NONNULL _internal_mutable_get_composing_string();

  public:
  // .hazkey.commands.GetHiraganaWithCursor get_hiragana_with_cursor = 9;
  bool has_get_hiragana_with_cursor() const;
  private:
  bool _internal_has_get_hiragana_with_cursor() const;

  public:
  void clear_get_hiragana_with_cursor() ;
  const ::hazkey::commands::GetHiraganaWithCursor& get_hiragana_with_cursor() const;
  [[nodiscard]] ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE release_get_hiragana_with_cursor();
  ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NONNULL mutable_get_hiragana_with_cursor();
  void set_allocated_get_hiragana_with_cursor(::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_get_hiragana_with_cursor(::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE value);
  ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE unsafe_arena_release_get_hiragana_with_cursor();

  private:
  const ::hazkey::commands::GetHiraganaWithCursor& _internal_get_hiragana_with_cursor() const;
  ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NONNULL _internal_mutable_get_hiragana_with_cursor();

  public:
  // .hazkey.commands.GetCandidates get_candidates = 10;
  bool has_get_candidates() const;
  private:
  bool _internal_has_get_candidates() const;

  public:
  void clear_get_candidates() ;
  const ::hazkey::commands::GetCandidates& get_candidates() const;
  [[nodiscard]] ::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE release_get_candidates();
  ::hazkey::commands::GetCandidates* PROTOBUF_NONNULL mutable_get_candidates();
  void set_allocated_get_candidates(::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_get_candidates(::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE value);
  ::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE unsafe_arena_release_get_candidates();

  private:
  const ::hazkey::commands::GetCandidates& _internal_get_candidates() const;
  ::hazkey::commands::GetCandidates* PROTOBUF_NONNULL _internal_mutable_get_candidates();

  public:
  // .hazkey.config.GetConfig get_config = 100;
  bool has_get_config() const;
  private:
  bool _internal_has_get_config() const;

  public:
  void clear_get_config() ;
  const ::hazkey::config::GetConfig& get_config() const;
  [[nodiscard]] ::hazkey::config::GetConfig* PROTOBUF_NULLABLE release_get_config();
  ::hazkey::config::GetConfig* PROTOBUF_NONNULL mutable_get_config();
  void set_allocated_get_config(::hazkey::config::GetConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_get_config(::hazkey::config::GetConfig* PROTOBUF_NULLABLE value);
  ::hazkey::config::GetConfig* PROTOBUF_NULLABLE unsafe_arena_release_get_config();

  private:
  const ::hazkey::config::GetConfig& _internal_get_config() const;
  ::hazkey::config::GetConfig* PROTOBUF_NONNULL _internal_mutable_get_config();

  public:
  // .hazkey.config.SetConfig set_config = 101;
  bool has_set_config() const;
  private:
  bool _internal_has_set_config() const;

  public:
  void clear_set_config() ;
  const ::hazkey::config::SetConfig& set_config() const;
  [[nodiscard]] ::hazkey::config::SetConfig* PROTOBUF_NULLABLE release_set_config();
  ::hazkey::config::SetConfig* PROTOBUF_NONNULL mutable_set_config();
  void set_allocated_set_config(::hazkey::config::SetConfig* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_set_config(::hazkey::config::SetConfig* PROTOBUF_NULLABLE value);
  ::hazkey::config::SetConfig* PROTOBUF_NULLABLE unsafe_arena_release_set_config();

  private:
  const ::hazkey::config::SetConfig& _internal_set_config() const;
  ::hazkey::config::SetConfig* PROTOBUF_NONNULL _internal_mutable_set_config();

  public:
  // .hazkey.config.GetDefaultProfile get_default_profile = 102;
  bool has_get_default_profile() const;
  private:
  bool _internal_has_get_default_profile() const;

  public:
  void clear_get_default_profile() ;
  const ::hazkey::config::GetDefaultProfile& get_default_profile() const;
  [[nodiscard]] ::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE release_get_default_profile();
  ::hazkey::config::GetDefaultProfile* PROTOBUF_NONNULL mutable_get_default_profile();
  void set_allocated_get_default_profile(::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_get_default_profile(::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE value);
  ::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE unsafe_arena_release_get_default_profile();

  private:
  const ::hazkey::config::GetDefaultProfile& _internal_get_default_profile() const;
  ::hazkey::config::GetDefaultProfile* PROTOBUF_NONNULL _internal_mutable_get_default_profile();

  public:
  // .hazkey.config.ClearAllHistory clear_all_history = 103;
  bool has_clear_all_history() const;
  private:
  bool _internal_has_clear_all_history() const;

  public:
  void clear_clear_all_history() ;
  const ::hazkey::config::ClearAllHistory& clear_all_history() const;
  [[nodiscard]] ::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE release_clear_all_history();
  ::hazkey::config::ClearAllHistory* PROTOBUF_NONNULL mutable_clear_all_history();
  void set_allocated_clear_all_history(::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_clear_all_history(::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE value);
  ::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE unsafe_arena_release_clear_all_history();

  private:
  const ::hazkey::config::ClearAllHistory& _internal_clear_all_history() const;
  ::hazkey::config::ClearAllHistory* PROTOBUF_NONNULL _internal_mutable_clear_all_history();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:hazkey.RequestEnvelope)
 private:
  class _Internal;
  void set_has_new_composing_text();
  void set_has_set_context();
  void set_has_input_char();
  void set_has_move_cursor();
  void set_has_prefix_complete();
  void set_has_delete_left();
  void set_has_delete_right();
  void set_has_get_composing_string();
  void set_has_get_hiragana_with_cursor();
  void set_has_get_candidates();
  void set_has_get_config();
  void set_has_set_config();
  void set_has_get_default_profile();
  void set_has_clear_all_history();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 14,
                                   14, 0,
                                   7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const RequestEnvelope& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE new_composing_text_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE set_context_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE input_char_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE move_cursor_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE prefix_complete_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE delete_left_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE delete_right_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE get_composing_string_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE get_hiragana_with_cursor_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE get_candidates_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE get_config_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE set_config_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE get_default_profile_;
      ::google::protobuf::Message* PROTOBUF_NULLABLE clear_all_history_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull RequestEnvelope_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestEnvelope

// .hazkey.commands.NewComposingText new_composing_text = 1;
inline bool RequestEnvelope::has_new_composing_text() const {
  return payload_case() == kNewComposingText;
}
inline bool RequestEnvelope::_internal_has_new_composing_text() const {
  return payload_case() == kNewComposingText;
}
inline void RequestEnvelope::set_has_new_composing_text() {
  _impl_._oneof_case_[0] = kNewComposingText;
}
inline ::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE RequestEnvelope::release_new_composing_text() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.new_composing_text)
  if (payload_case() == kNewComposingText) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::NewComposingText*>(_impl_.payload_.new_composing_text_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.new_composing_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::NewComposingText& RequestEnvelope::_internal_new_composing_text() const {
  return payload_case() == kNewComposingText ? *reinterpret_cast<::hazkey::commands::NewComposingText*>(_impl_.payload_.new_composing_text_) : reinterpret_cast<::hazkey::commands::NewComposingText&>(::hazkey::commands::_NewComposingText_default_instance_);
}
inline const ::hazkey::commands::NewComposingText& RequestEnvelope::new_composing_text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.new_composing_text)
  return _internal_new_composing_text();
}
inline ::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_new_composing_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.new_composing_text)
  if (payload_case() == kNewComposingText) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::NewComposingText*>(_impl_.payload_.new_composing_text_);
    _impl_.payload_.new_composing_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_new_composing_text(
    ::hazkey::commands::NewComposingText* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_new_composing_text();
    _impl_.payload_.new_composing_text_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.new_composing_text)
}
inline ::hazkey::commands::NewComposingText* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_new_composing_text() {
  if (payload_case() != kNewComposingText) {
    clear_payload();
    set_has_new_composing_text();
    _impl_.payload_.new_composing_text_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::NewComposingText>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::NewComposingText*>(_impl_.payload_.new_composing_text_);
}
inline ::hazkey::commands::NewComposingText* PROTOBUF_NONNULL RequestEnvelope::mutable_new_composing_text()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::NewComposingText* _msg = _internal_mutable_new_composing_text();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.new_composing_text)
  return _msg;
}

// .hazkey.commands.SetContext set_context = 2;
inline bool RequestEnvelope::has_set_context() const {
  return payload_case() == kSetContext;
}
inline bool RequestEnvelope::_internal_has_set_context() const {
  return payload_case() == kSetContext;
}
inline void RequestEnvelope::set_has_set_context() {
  _impl_._oneof_case_[0] = kSetContext;
}
inline ::hazkey::commands::SetContext* PROTOBUF_NULLABLE RequestEnvelope::release_set_context() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.set_context)
  if (payload_case() == kSetContext) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::SetContext*>(_impl_.payload_.set_context_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.set_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::SetContext& RequestEnvelope::_internal_set_context() const {
  return payload_case() == kSetContext ? *reinterpret_cast<::hazkey::commands::SetContext*>(_impl_.payload_.set_context_) : reinterpret_cast<::hazkey::commands::SetContext&>(::hazkey::commands::_SetContext_default_instance_);
}
inline const ::hazkey::commands::SetContext& RequestEnvelope::set_context() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.set_context)
  return _internal_set_context();
}
inline ::hazkey::commands::SetContext* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_set_context() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.set_context)
  if (payload_case() == kSetContext) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::SetContext*>(_impl_.payload_.set_context_);
    _impl_.payload_.set_context_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_set_context(
    ::hazkey::commands::SetContext* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_set_context();
    _impl_.payload_.set_context_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.set_context)
}
inline ::hazkey::commands::SetContext* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_set_context() {
  if (payload_case() != kSetContext) {
    clear_payload();
    set_has_set_context();
    _impl_.payload_.set_context_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::SetContext>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::SetContext*>(_impl_.payload_.set_context_);
}
inline ::hazkey::commands::SetContext* PROTOBUF_NONNULL RequestEnvelope::mutable_set_context()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::SetContext* _msg = _internal_mutable_set_context();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.set_context)
  return _msg;
}

// .hazkey.commands.InputChar input_char = 3;
inline bool RequestEnvelope::has_input_char() const {
  return payload_case() == kInputChar;
}
inline bool RequestEnvelope::_internal_has_input_char() const {
  return payload_case() == kInputChar;
}
inline void RequestEnvelope::set_has_input_char() {
  _impl_._oneof_case_[0] = kInputChar;
}
inline ::hazkey::commands::InputChar* PROTOBUF_NULLABLE RequestEnvelope::release_input_char() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.input_char)
  if (payload_case() == kInputChar) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::InputChar*>(_impl_.payload_.input_char_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.input_char_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::InputChar& RequestEnvelope::_internal_input_char() const {
  return payload_case() == kInputChar ? *reinterpret_cast<::hazkey::commands::InputChar*>(_impl_.payload_.input_char_) : reinterpret_cast<::hazkey::commands::InputChar&>(::hazkey::commands::_InputChar_default_instance_);
}
inline const ::hazkey::commands::InputChar& RequestEnvelope::input_char() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.input_char)
  return _internal_input_char();
}
inline ::hazkey::commands::InputChar* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_input_char() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.input_char)
  if (payload_case() == kInputChar) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::InputChar*>(_impl_.payload_.input_char_);
    _impl_.payload_.input_char_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_input_char(
    ::hazkey::commands::InputChar* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_input_char();
    _impl_.payload_.input_char_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.input_char)
}
inline ::hazkey::commands::InputChar* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_input_char() {
  if (payload_case() != kInputChar) {
    clear_payload();
    set_has_input_char();
    _impl_.payload_.input_char_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::InputChar>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::InputChar*>(_impl_.payload_.input_char_);
}
inline ::hazkey::commands::InputChar* PROTOBUF_NONNULL RequestEnvelope::mutable_input_char()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::InputChar* _msg = _internal_mutable_input_char();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.input_char)
  return _msg;
}

// .hazkey.commands.MoveCursor move_cursor = 4;
inline bool RequestEnvelope::has_move_cursor() const {
  return payload_case() == kMoveCursor;
}
inline bool RequestEnvelope::_internal_has_move_cursor() const {
  return payload_case() == kMoveCursor;
}
inline void RequestEnvelope::set_has_move_cursor() {
  _impl_._oneof_case_[0] = kMoveCursor;
}
inline ::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE RequestEnvelope::release_move_cursor() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.move_cursor)
  if (payload_case() == kMoveCursor) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::MoveCursor*>(_impl_.payload_.move_cursor_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.move_cursor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::MoveCursor& RequestEnvelope::_internal_move_cursor() const {
  return payload_case() == kMoveCursor ? *reinterpret_cast<::hazkey::commands::MoveCursor*>(_impl_.payload_.move_cursor_) : reinterpret_cast<::hazkey::commands::MoveCursor&>(::hazkey::commands::_MoveCursor_default_instance_);
}
inline const ::hazkey::commands::MoveCursor& RequestEnvelope::move_cursor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.move_cursor)
  return _internal_move_cursor();
}
inline ::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_move_cursor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.move_cursor)
  if (payload_case() == kMoveCursor) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::MoveCursor*>(_impl_.payload_.move_cursor_);
    _impl_.payload_.move_cursor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_move_cursor(
    ::hazkey::commands::MoveCursor* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_move_cursor();
    _impl_.payload_.move_cursor_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.move_cursor)
}
inline ::hazkey::commands::MoveCursor* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_move_cursor() {
  if (payload_case() != kMoveCursor) {
    clear_payload();
    set_has_move_cursor();
    _impl_.payload_.move_cursor_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::MoveCursor>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::MoveCursor*>(_impl_.payload_.move_cursor_);
}
inline ::hazkey::commands::MoveCursor* PROTOBUF_NONNULL RequestEnvelope::mutable_move_cursor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::MoveCursor* _msg = _internal_mutable_move_cursor();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.move_cursor)
  return _msg;
}

// .hazkey.commands.PrefixComplete prefix_complete = 5;
inline bool RequestEnvelope::has_prefix_complete() const {
  return payload_case() == kPrefixComplete;
}
inline bool RequestEnvelope::_internal_has_prefix_complete() const {
  return payload_case() == kPrefixComplete;
}
inline void RequestEnvelope::set_has_prefix_complete() {
  _impl_._oneof_case_[0] = kPrefixComplete;
}
inline ::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE RequestEnvelope::release_prefix_complete() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.prefix_complete)
  if (payload_case() == kPrefixComplete) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::PrefixComplete*>(_impl_.payload_.prefix_complete_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.prefix_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::PrefixComplete& RequestEnvelope::_internal_prefix_complete() const {
  return payload_case() == kPrefixComplete ? *reinterpret_cast<::hazkey::commands::PrefixComplete*>(_impl_.payload_.prefix_complete_) : reinterpret_cast<::hazkey::commands::PrefixComplete&>(::hazkey::commands::_PrefixComplete_default_instance_);
}
inline const ::hazkey::commands::PrefixComplete& RequestEnvelope::prefix_complete() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.prefix_complete)
  return _internal_prefix_complete();
}
inline ::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_prefix_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.prefix_complete)
  if (payload_case() == kPrefixComplete) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::PrefixComplete*>(_impl_.payload_.prefix_complete_);
    _impl_.payload_.prefix_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_prefix_complete(
    ::hazkey::commands::PrefixComplete* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_prefix_complete();
    _impl_.payload_.prefix_complete_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.prefix_complete)
}
inline ::hazkey::commands::PrefixComplete* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_prefix_complete() {
  if (payload_case() != kPrefixComplete) {
    clear_payload();
    set_has_prefix_complete();
    _impl_.payload_.prefix_complete_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::PrefixComplete>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::PrefixComplete*>(_impl_.payload_.prefix_complete_);
}
inline ::hazkey::commands::PrefixComplete* PROTOBUF_NONNULL RequestEnvelope::mutable_prefix_complete()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::PrefixComplete* _msg = _internal_mutable_prefix_complete();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.prefix_complete)
  return _msg;
}

// .hazkey.commands.DeleteLeft delete_left = 6;
inline bool RequestEnvelope::has_delete_left() const {
  return payload_case() == kDeleteLeft;
}
inline bool RequestEnvelope::_internal_has_delete_left() const {
  return payload_case() == kDeleteLeft;
}
inline void RequestEnvelope::set_has_delete_left() {
  _impl_._oneof_case_[0] = kDeleteLeft;
}
inline ::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE RequestEnvelope::release_delete_left() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.delete_left)
  if (payload_case() == kDeleteLeft) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::DeleteLeft*>(_impl_.payload_.delete_left_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.delete_left_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::DeleteLeft& RequestEnvelope::_internal_delete_left() const {
  return payload_case() == kDeleteLeft ? *reinterpret_cast<::hazkey::commands::DeleteLeft*>(_impl_.payload_.delete_left_) : reinterpret_cast<::hazkey::commands::DeleteLeft&>(::hazkey::commands::_DeleteLeft_default_instance_);
}
inline const ::hazkey::commands::DeleteLeft& RequestEnvelope::delete_left() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.delete_left)
  return _internal_delete_left();
}
inline ::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_delete_left() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.delete_left)
  if (payload_case() == kDeleteLeft) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::DeleteLeft*>(_impl_.payload_.delete_left_);
    _impl_.payload_.delete_left_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_delete_left(
    ::hazkey::commands::DeleteLeft* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_delete_left();
    _impl_.payload_.delete_left_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.delete_left)
}
inline ::hazkey::commands::DeleteLeft* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_delete_left() {
  if (payload_case() != kDeleteLeft) {
    clear_payload();
    set_has_delete_left();
    _impl_.payload_.delete_left_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::DeleteLeft>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::DeleteLeft*>(_impl_.payload_.delete_left_);
}
inline ::hazkey::commands::DeleteLeft* PROTOBUF_NONNULL RequestEnvelope::mutable_delete_left()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::DeleteLeft* _msg = _internal_mutable_delete_left();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.delete_left)
  return _msg;
}

// .hazkey.commands.DeleteRight delete_right = 7;
inline bool RequestEnvelope::has_delete_right() const {
  return payload_case() == kDeleteRight;
}
inline bool RequestEnvelope::_internal_has_delete_right() const {
  return payload_case() == kDeleteRight;
}
inline void RequestEnvelope::set_has_delete_right() {
  _impl_._oneof_case_[0] = kDeleteRight;
}
inline ::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE RequestEnvelope::release_delete_right() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.delete_right)
  if (payload_case() == kDeleteRight) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::DeleteRight*>(_impl_.payload_.delete_right_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.delete_right_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::DeleteRight& RequestEnvelope::_internal_delete_right() const {
  return payload_case() == kDeleteRight ? *reinterpret_cast<::hazkey::commands::DeleteRight*>(_impl_.payload_.delete_right_) : reinterpret_cast<::hazkey::commands::DeleteRight&>(::hazkey::commands::_DeleteRight_default_instance_);
}
inline const ::hazkey::commands::DeleteRight& RequestEnvelope::delete_right() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.delete_right)
  return _internal_delete_right();
}
inline ::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_delete_right() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.delete_right)
  if (payload_case() == kDeleteRight) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::DeleteRight*>(_impl_.payload_.delete_right_);
    _impl_.payload_.delete_right_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_delete_right(
    ::hazkey::commands::DeleteRight* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_delete_right();
    _impl_.payload_.delete_right_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.delete_right)
}
inline ::hazkey::commands::DeleteRight* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_delete_right() {
  if (payload_case() != kDeleteRight) {
    clear_payload();
    set_has_delete_right();
    _impl_.payload_.delete_right_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::DeleteRight>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::DeleteRight*>(_impl_.payload_.delete_right_);
}
inline ::hazkey::commands::DeleteRight* PROTOBUF_NONNULL RequestEnvelope::mutable_delete_right()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::DeleteRight* _msg = _internal_mutable_delete_right();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.delete_right)
  return _msg;
}

// .hazkey.commands.GetComposingString get_composing_string = 8;
inline bool RequestEnvelope::has_get_composing_string() const {
  return payload_case() == kGetComposingString;
}
inline bool RequestEnvelope::_internal_has_get_composing_string() const {
  return payload_case() == kGetComposingString;
}
inline void RequestEnvelope::set_has_get_composing_string() {
  _impl_._oneof_case_[0] = kGetComposingString;
}
inline ::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE RequestEnvelope::release_get_composing_string() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.get_composing_string)
  if (payload_case() == kGetComposingString) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::GetComposingString*>(_impl_.payload_.get_composing_string_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_composing_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::GetComposingString& RequestEnvelope::_internal_get_composing_string() const {
  return payload_case() == kGetComposingString ? *reinterpret_cast<::hazkey::commands::GetComposingString*>(_impl_.payload_.get_composing_string_) : reinterpret_cast<::hazkey::commands::GetComposingString&>(::hazkey::commands::_GetComposingString_default_instance_);
}
inline const ::hazkey::commands::GetComposingString& RequestEnvelope::get_composing_string() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.get_composing_string)
  return _internal_get_composing_string();
}
inline ::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_get_composing_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.get_composing_string)
  if (payload_case() == kGetComposingString) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::GetComposingString*>(_impl_.payload_.get_composing_string_);
    _impl_.payload_.get_composing_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_get_composing_string(
    ::hazkey::commands::GetComposingString* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_composing_string();
    _impl_.payload_.get_composing_string_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.get_composing_string)
}
inline ::hazkey::commands::GetComposingString* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_get_composing_string() {
  if (payload_case() != kGetComposingString) {
    clear_payload();
    set_has_get_composing_string();
    _impl_.payload_.get_composing_string_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::GetComposingString>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::GetComposingString*>(_impl_.payload_.get_composing_string_);
}
inline ::hazkey::commands::GetComposingString* PROTOBUF_NONNULL RequestEnvelope::mutable_get_composing_string()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::GetComposingString* _msg = _internal_mutable_get_composing_string();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.get_composing_string)
  return _msg;
}

// .hazkey.commands.GetHiraganaWithCursor get_hiragana_with_cursor = 9;
inline bool RequestEnvelope::has_get_hiragana_with_cursor() const {
  return payload_case() == kGetHiraganaWithCursor;
}
inline bool RequestEnvelope::_internal_has_get_hiragana_with_cursor() const {
  return payload_case() == kGetHiraganaWithCursor;
}
inline void RequestEnvelope::set_has_get_hiragana_with_cursor() {
  _impl_._oneof_case_[0] = kGetHiraganaWithCursor;
}
inline ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE RequestEnvelope::release_get_hiragana_with_cursor() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.get_hiragana_with_cursor)
  if (payload_case() == kGetHiraganaWithCursor) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::GetHiraganaWithCursor*>(_impl_.payload_.get_hiragana_with_cursor_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_hiragana_with_cursor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::GetHiraganaWithCursor& RequestEnvelope::_internal_get_hiragana_with_cursor() const {
  return payload_case() == kGetHiraganaWithCursor ? *reinterpret_cast<::hazkey::commands::GetHiraganaWithCursor*>(_impl_.payload_.get_hiragana_with_cursor_) : reinterpret_cast<::hazkey::commands::GetHiraganaWithCursor&>(::hazkey::commands::_GetHiraganaWithCursor_default_instance_);
}
inline const ::hazkey::commands::GetHiraganaWithCursor& RequestEnvelope::get_hiragana_with_cursor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.get_hiragana_with_cursor)
  return _internal_get_hiragana_with_cursor();
}
inline ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_get_hiragana_with_cursor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.get_hiragana_with_cursor)
  if (payload_case() == kGetHiraganaWithCursor) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::GetHiraganaWithCursor*>(_impl_.payload_.get_hiragana_with_cursor_);
    _impl_.payload_.get_hiragana_with_cursor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_get_hiragana_with_cursor(
    ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_hiragana_with_cursor();
    _impl_.payload_.get_hiragana_with_cursor_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.get_hiragana_with_cursor)
}
inline ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_get_hiragana_with_cursor() {
  if (payload_case() != kGetHiraganaWithCursor) {
    clear_payload();
    set_has_get_hiragana_with_cursor();
    _impl_.payload_.get_hiragana_with_cursor_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::GetHiraganaWithCursor>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::GetHiraganaWithCursor*>(_impl_.payload_.get_hiragana_with_cursor_);
}
inline ::hazkey::commands::GetHiraganaWithCursor* PROTOBUF_NONNULL RequestEnvelope::mutable_get_hiragana_with_cursor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::GetHiraganaWithCursor* _msg = _internal_mutable_get_hiragana_with_cursor();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.get_hiragana_with_cursor)
  return _msg;
}

// .hazkey.commands.GetCandidates get_candidates = 10;
inline bool RequestEnvelope::has_get_candidates() const {
  return payload_case() == kGetCandidates;
}
inline bool RequestEnvelope::_internal_has_get_candidates() const {
  return payload_case() == kGetCandidates;
}
inline void RequestEnvelope::set_has_get_candidates() {
  _impl_._oneof_case_[0] = kGetCandidates;
}
inline ::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE RequestEnvelope::release_get_candidates() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.get_candidates)
  if (payload_case() == kGetCandidates) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::GetCandidates*>(_impl_.payload_.get_candidates_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_candidates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::GetCandidates& RequestEnvelope::_internal_get_candidates() const {
  return payload_case() == kGetCandidates ? *reinterpret_cast<::hazkey::commands::GetCandidates*>(_impl_.payload_.get_candidates_) : reinterpret_cast<::hazkey::commands::GetCandidates&>(::hazkey::commands::_GetCandidates_default_instance_);
}
inline const ::hazkey::commands::GetCandidates& RequestEnvelope::get_candidates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.get_candidates)
  return _internal_get_candidates();
}
inline ::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_get_candidates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.get_candidates)
  if (payload_case() == kGetCandidates) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::GetCandidates*>(_impl_.payload_.get_candidates_);
    _impl_.payload_.get_candidates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_get_candidates(
    ::hazkey::commands::GetCandidates* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_candidates();
    _impl_.payload_.get_candidates_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.get_candidates)
}
inline ::hazkey::commands::GetCandidates* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_get_candidates() {
  if (payload_case() != kGetCandidates) {
    clear_payload();
    set_has_get_candidates();
    _impl_.payload_.get_candidates_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::GetCandidates>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::GetCandidates*>(_impl_.payload_.get_candidates_);
}
inline ::hazkey::commands::GetCandidates* PROTOBUF_NONNULL RequestEnvelope::mutable_get_candidates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::GetCandidates* _msg = _internal_mutable_get_candidates();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.get_candidates)
  return _msg;
}

// .hazkey.config.GetConfig get_config = 100;
inline bool RequestEnvelope::has_get_config() const {
  return payload_case() == kGetConfig;
}
inline bool RequestEnvelope::_internal_has_get_config() const {
  return payload_case() == kGetConfig;
}
inline void RequestEnvelope::set_has_get_config() {
  _impl_._oneof_case_[0] = kGetConfig;
}
inline ::hazkey::config::GetConfig* PROTOBUF_NULLABLE RequestEnvelope::release_get_config() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.get_config)
  if (payload_case() == kGetConfig) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::GetConfig*>(_impl_.payload_.get_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::config::GetConfig& RequestEnvelope::_internal_get_config() const {
  return payload_case() == kGetConfig ? *reinterpret_cast<::hazkey::config::GetConfig*>(_impl_.payload_.get_config_) : reinterpret_cast<::hazkey::config::GetConfig&>(::hazkey::config::_GetConfig_default_instance_);
}
inline const ::hazkey::config::GetConfig& RequestEnvelope::get_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.get_config)
  return _internal_get_config();
}
inline ::hazkey::config::GetConfig* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_get_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.get_config)
  if (payload_case() == kGetConfig) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::GetConfig*>(_impl_.payload_.get_config_);
    _impl_.payload_.get_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_get_config(
    ::hazkey::config::GetConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_config();
    _impl_.payload_.get_config_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.get_config)
}
inline ::hazkey::config::GetConfig* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_get_config() {
  if (payload_case() != kGetConfig) {
    clear_payload();
    set_has_get_config();
    _impl_.payload_.get_config_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::config::GetConfig>(GetArena()));
  }
  return reinterpret_cast<::hazkey::config::GetConfig*>(_impl_.payload_.get_config_);
}
inline ::hazkey::config::GetConfig* PROTOBUF_NONNULL RequestEnvelope::mutable_get_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::config::GetConfig* _msg = _internal_mutable_get_config();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.get_config)
  return _msg;
}

// .hazkey.config.SetConfig set_config = 101;
inline bool RequestEnvelope::has_set_config() const {
  return payload_case() == kSetConfig;
}
inline bool RequestEnvelope::_internal_has_set_config() const {
  return payload_case() == kSetConfig;
}
inline void RequestEnvelope::set_has_set_config() {
  _impl_._oneof_case_[0] = kSetConfig;
}
inline ::hazkey::config::SetConfig* PROTOBUF_NULLABLE RequestEnvelope::release_set_config() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.set_config)
  if (payload_case() == kSetConfig) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::SetConfig*>(_impl_.payload_.set_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.set_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::config::SetConfig& RequestEnvelope::_internal_set_config() const {
  return payload_case() == kSetConfig ? *reinterpret_cast<::hazkey::config::SetConfig*>(_impl_.payload_.set_config_) : reinterpret_cast<::hazkey::config::SetConfig&>(::hazkey::config::_SetConfig_default_instance_);
}
inline const ::hazkey::config::SetConfig& RequestEnvelope::set_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.set_config)
  return _internal_set_config();
}
inline ::hazkey::config::SetConfig* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_set_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.set_config)
  if (payload_case() == kSetConfig) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::SetConfig*>(_impl_.payload_.set_config_);
    _impl_.payload_.set_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_set_config(
    ::hazkey::config::SetConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_set_config();
    _impl_.payload_.set_config_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.set_config)
}
inline ::hazkey::config::SetConfig* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_set_config() {
  if (payload_case() != kSetConfig) {
    clear_payload();
    set_has_set_config();
    _impl_.payload_.set_config_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::config::SetConfig>(GetArena()));
  }
  return reinterpret_cast<::hazkey::config::SetConfig*>(_impl_.payload_.set_config_);
}
inline ::hazkey::config::SetConfig* PROTOBUF_NONNULL RequestEnvelope::mutable_set_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::config::SetConfig* _msg = _internal_mutable_set_config();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.set_config)
  return _msg;
}

// .hazkey.config.GetDefaultProfile get_default_profile = 102;
inline bool RequestEnvelope::has_get_default_profile() const {
  return payload_case() == kGetDefaultProfile;
}
inline bool RequestEnvelope::_internal_has_get_default_profile() const {
  return payload_case() == kGetDefaultProfile;
}
inline void RequestEnvelope::set_has_get_default_profile() {
  _impl_._oneof_case_[0] = kGetDefaultProfile;
}
inline ::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE RequestEnvelope::release_get_default_profile() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.get_default_profile)
  if (payload_case() == kGetDefaultProfile) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::GetDefaultProfile*>(_impl_.payload_.get_default_profile_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_default_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::config::GetDefaultProfile& RequestEnvelope::_internal_get_default_profile() const {
  return payload_case() == kGetDefaultProfile ? *reinterpret_cast<::hazkey::config::GetDefaultProfile*>(_impl_.payload_.get_default_profile_) : reinterpret_cast<::hazkey::config::GetDefaultProfile&>(::hazkey::config::_GetDefaultProfile_default_instance_);
}
inline const ::hazkey::config::GetDefaultProfile& RequestEnvelope::get_default_profile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.get_default_profile)
  return _internal_get_default_profile();
}
inline ::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_get_default_profile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.get_default_profile)
  if (payload_case() == kGetDefaultProfile) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::GetDefaultProfile*>(_impl_.payload_.get_default_profile_);
    _impl_.payload_.get_default_profile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_get_default_profile(
    ::hazkey::config::GetDefaultProfile* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_default_profile();
    _impl_.payload_.get_default_profile_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.get_default_profile)
}
inline ::hazkey::config::GetDefaultProfile* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_get_default_profile() {
  if (payload_case() != kGetDefaultProfile) {
    clear_payload();
    set_has_get_default_profile();
    _impl_.payload_.get_default_profile_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::config::GetDefaultProfile>(GetArena()));
  }
  return reinterpret_cast<::hazkey::config::GetDefaultProfile*>(_impl_.payload_.get_default_profile_);
}
inline ::hazkey::config::GetDefaultProfile* PROTOBUF_NONNULL RequestEnvelope::mutable_get_default_profile()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::config::GetDefaultProfile* _msg = _internal_mutable_get_default_profile();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.get_default_profile)
  return _msg;
}

// .hazkey.config.ClearAllHistory clear_all_history = 103;
inline bool RequestEnvelope::has_clear_all_history() const {
  return payload_case() == kClearAllHistory;
}
inline bool RequestEnvelope::_internal_has_clear_all_history() const {
  return payload_case() == kClearAllHistory;
}
inline void RequestEnvelope::set_has_clear_all_history() {
  _impl_._oneof_case_[0] = kClearAllHistory;
}
inline ::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE RequestEnvelope::release_clear_all_history() {
  // @@protoc_insertion_point(field_release:hazkey.RequestEnvelope.clear_all_history)
  if (payload_case() == kClearAllHistory) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::ClearAllHistory*>(_impl_.payload_.clear_all_history_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.clear_all_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::config::ClearAllHistory& RequestEnvelope::_internal_clear_all_history() const {
  return payload_case() == kClearAllHistory ? *reinterpret_cast<::hazkey::config::ClearAllHistory*>(_impl_.payload_.clear_all_history_) : reinterpret_cast<::hazkey::config::ClearAllHistory&>(::hazkey::config::_ClearAllHistory_default_instance_);
}
inline const ::hazkey::config::ClearAllHistory& RequestEnvelope::clear_all_history() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.RequestEnvelope.clear_all_history)
  return _internal_clear_all_history();
}
inline ::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE RequestEnvelope::unsafe_arena_release_clear_all_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.RequestEnvelope.clear_all_history)
  if (payload_case() == kClearAllHistory) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::ClearAllHistory*>(_impl_.payload_.clear_all_history_);
    _impl_.payload_.clear_all_history_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestEnvelope::unsafe_arena_set_allocated_clear_all_history(
    ::hazkey::config::ClearAllHistory* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_clear_all_history();
    _impl_.payload_.clear_all_history_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.RequestEnvelope.clear_all_history)
}
inline ::hazkey::config::ClearAllHistory* PROTOBUF_NONNULL RequestEnvelope::_internal_mutable_clear_all_history() {
  if (payload_case() != kClearAllHistory) {
    clear_payload();
    set_has_clear_all_history();
    _impl_.payload_.clear_all_history_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::config::ClearAllHistory>(GetArena()));
  }
  return reinterpret_cast<::hazkey::config::ClearAllHistory*>(_impl_.payload_.clear_all_history_);
}
inline ::hazkey::config::ClearAllHistory* PROTOBUF_NONNULL RequestEnvelope::mutable_clear_all_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::config::ClearAllHistory* _msg = _internal_mutable_clear_all_history();
  // @@protoc_insertion_point(field_mutable:hazkey.RequestEnvelope.clear_all_history)
  return _msg;
}

inline bool RequestEnvelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void RequestEnvelope::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline RequestEnvelope::PayloadCase RequestEnvelope::payload_case() const {
  return RequestEnvelope::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseEnvelope

// .hazkey.StatusCode status = 1;
inline void ResponseEnvelope::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::hazkey::StatusCode ResponseEnvelope::status() const {
  // @@protoc_insertion_point(field_get:hazkey.ResponseEnvelope.status)
  return _internal_status();
}
inline void ResponseEnvelope::set_status(::hazkey::StatusCode value) {
  _internal_set_status(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:hazkey.ResponseEnvelope.status)
}
inline ::hazkey::StatusCode ResponseEnvelope::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::hazkey::StatusCode>(_impl_.status_);
}
inline void ResponseEnvelope::_internal_set_status(::hazkey::StatusCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string error_message = 2;
inline void ResponseEnvelope::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ResponseEnvelope::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.ResponseEnvelope.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ResponseEnvelope::set_error_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hazkey.ResponseEnvelope.error_message)
}
inline ::std::string* PROTOBUF_NONNULL ResponseEnvelope::mutable_error_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:hazkey.ResponseEnvelope.error_message)
  return _s;
}
inline const ::std::string& ResponseEnvelope::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void ResponseEnvelope::_internal_set_error_message(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ResponseEnvelope::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_message_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ResponseEnvelope::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:hazkey.ResponseEnvelope.error_message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.error_message_.Set("", GetArena());
  }
  return released;
}
inline void ResponseEnvelope::set_allocated_error_message(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:hazkey.ResponseEnvelope.error_message)
}

// string text = 3;
inline bool ResponseEnvelope::has_text() const {
  return payload_case() == kText;
}
inline void ResponseEnvelope::set_has_text() {
  _impl_._oneof_case_[0] = kText;
}
inline void ResponseEnvelope::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kText) {
    _impl_.payload_.text_.Destroy();
    clear_has_payload();
  }
}
inline const ::std::string& ResponseEnvelope::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.ResponseEnvelope.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ResponseEnvelope::set_text(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() != kText) {
    clear_payload();

    set_has_text();
    _impl_.payload_.text_.InitDefault();
  }
  _impl_.payload_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hazkey.ResponseEnvelope.text)
}
inline ::std::string* PROTOBUF_NONNULL ResponseEnvelope::mutable_text()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:hazkey.ResponseEnvelope.text)
  return _s;
}
inline const ::std::string& ResponseEnvelope::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (payload_case() != kText) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.payload_.text_.Get();
}
inline void ResponseEnvelope::_internal_set_text(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() != kText) {
    clear_payload();

    set_has_text();
    _impl_.payload_.text_.InitDefault();
  }
  _impl_.payload_.text_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL ResponseEnvelope::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() != kText) {
    clear_payload();

    set_has_text();
    _impl_.payload_.text_.InitDefault();
  }
  return _impl_.payload_.text_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE ResponseEnvelope::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:hazkey.ResponseEnvelope.text)
  if (payload_case() != kText) {
    return nullptr;
  }
  clear_has_payload();
  return _impl_.payload_.text_.Release();
}
inline void ResponseEnvelope::set_allocated_text(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_payload()) {
    clear_payload();
  }
  if (value != nullptr) {
    set_has_text();
    _impl_.payload_.text_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:hazkey.ResponseEnvelope.text)
}

// .hazkey.commands.CandidatesResult candidates = 4;
inline bool ResponseEnvelope::has_candidates() const {
  return payload_case() == kCandidates;
}
inline bool ResponseEnvelope::_internal_has_candidates() const {
  return payload_case() == kCandidates;
}
inline void ResponseEnvelope::set_has_candidates() {
  _impl_._oneof_case_[0] = kCandidates;
}
inline ::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE ResponseEnvelope::release_candidates() {
  // @@protoc_insertion_point(field_release:hazkey.ResponseEnvelope.candidates)
  if (payload_case() == kCandidates) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::CandidatesResult*>(_impl_.payload_.candidates_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.candidates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::CandidatesResult& ResponseEnvelope::_internal_candidates() const {
  return payload_case() == kCandidates ? *reinterpret_cast<::hazkey::commands::CandidatesResult*>(_impl_.payload_.candidates_) : reinterpret_cast<::hazkey::commands::CandidatesResult&>(::hazkey::commands::_CandidatesResult_default_instance_);
}
inline const ::hazkey::commands::CandidatesResult& ResponseEnvelope::candidates() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.ResponseEnvelope.candidates)
  return _internal_candidates();
}
inline ::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE ResponseEnvelope::unsafe_arena_release_candidates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.ResponseEnvelope.candidates)
  if (payload_case() == kCandidates) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::CandidatesResult*>(_impl_.payload_.candidates_);
    _impl_.payload_.candidates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseEnvelope::unsafe_arena_set_allocated_candidates(
    ::hazkey::commands::CandidatesResult* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_candidates();
    _impl_.payload_.candidates_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.ResponseEnvelope.candidates)
}
inline ::hazkey::commands::CandidatesResult* PROTOBUF_NONNULL ResponseEnvelope::_internal_mutable_candidates() {
  if (payload_case() != kCandidates) {
    clear_payload();
    set_has_candidates();
    _impl_.payload_.candidates_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::CandidatesResult>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::CandidatesResult*>(_impl_.payload_.candidates_);
}
inline ::hazkey::commands::CandidatesResult* PROTOBUF_NONNULL ResponseEnvelope::mutable_candidates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::CandidatesResult* _msg = _internal_mutable_candidates();
  // @@protoc_insertion_point(field_mutable:hazkey.ResponseEnvelope.candidates)
  return _msg;
}

// .hazkey.commands.TextWithCursor text_with_cursor = 5;
inline bool ResponseEnvelope::has_text_with_cursor() const {
  return payload_case() == kTextWithCursor;
}
inline bool ResponseEnvelope::_internal_has_text_with_cursor() const {
  return payload_case() == kTextWithCursor;
}
inline void ResponseEnvelope::set_has_text_with_cursor() {
  _impl_._oneof_case_[0] = kTextWithCursor;
}
inline ::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE ResponseEnvelope::release_text_with_cursor() {
  // @@protoc_insertion_point(field_release:hazkey.ResponseEnvelope.text_with_cursor)
  if (payload_case() == kTextWithCursor) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::TextWithCursor*>(_impl_.payload_.text_with_cursor_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.text_with_cursor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::commands::TextWithCursor& ResponseEnvelope::_internal_text_with_cursor() const {
  return payload_case() == kTextWithCursor ? *reinterpret_cast<::hazkey::commands::TextWithCursor*>(_impl_.payload_.text_with_cursor_) : reinterpret_cast<::hazkey::commands::TextWithCursor&>(::hazkey::commands::_TextWithCursor_default_instance_);
}
inline const ::hazkey::commands::TextWithCursor& ResponseEnvelope::text_with_cursor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.ResponseEnvelope.text_with_cursor)
  return _internal_text_with_cursor();
}
inline ::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE ResponseEnvelope::unsafe_arena_release_text_with_cursor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.ResponseEnvelope.text_with_cursor)
  if (payload_case() == kTextWithCursor) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::commands::TextWithCursor*>(_impl_.payload_.text_with_cursor_);
    _impl_.payload_.text_with_cursor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseEnvelope::unsafe_arena_set_allocated_text_with_cursor(
    ::hazkey::commands::TextWithCursor* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_text_with_cursor();
    _impl_.payload_.text_with_cursor_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.ResponseEnvelope.text_with_cursor)
}
inline ::hazkey::commands::TextWithCursor* PROTOBUF_NONNULL ResponseEnvelope::_internal_mutable_text_with_cursor() {
  if (payload_case() != kTextWithCursor) {
    clear_payload();
    set_has_text_with_cursor();
    _impl_.payload_.text_with_cursor_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::commands::TextWithCursor>(GetArena()));
  }
  return reinterpret_cast<::hazkey::commands::TextWithCursor*>(_impl_.payload_.text_with_cursor_);
}
inline ::hazkey::commands::TextWithCursor* PROTOBUF_NONNULL ResponseEnvelope::mutable_text_with_cursor()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::commands::TextWithCursor* _msg = _internal_mutable_text_with_cursor();
  // @@protoc_insertion_point(field_mutable:hazkey.ResponseEnvelope.text_with_cursor)
  return _msg;
}

// .hazkey.config.CurrentConfig current_config = 100;
inline bool ResponseEnvelope::has_current_config() const {
  return payload_case() == kCurrentConfig;
}
inline bool ResponseEnvelope::_internal_has_current_config() const {
  return payload_case() == kCurrentConfig;
}
inline void ResponseEnvelope::set_has_current_config() {
  _impl_._oneof_case_[0] = kCurrentConfig;
}
inline ::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE ResponseEnvelope::release_current_config() {
  // @@protoc_insertion_point(field_release:hazkey.ResponseEnvelope.current_config)
  if (payload_case() == kCurrentConfig) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::CurrentConfig*>(_impl_.payload_.current_config_);
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.current_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hazkey::config::CurrentConfig& ResponseEnvelope::_internal_current_config() const {
  return payload_case() == kCurrentConfig ? *reinterpret_cast<::hazkey::config::CurrentConfig*>(_impl_.payload_.current_config_) : reinterpret_cast<::hazkey::config::CurrentConfig&>(::hazkey::config::_CurrentConfig_default_instance_);
}
inline const ::hazkey::config::CurrentConfig& ResponseEnvelope::current_config() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hazkey.ResponseEnvelope.current_config)
  return _internal_current_config();
}
inline ::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE ResponseEnvelope::unsafe_arena_release_current_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hazkey.ResponseEnvelope.current_config)
  if (payload_case() == kCurrentConfig) {
    clear_has_payload();
    auto* temp = reinterpret_cast<::hazkey::config::CurrentConfig*>(_impl_.payload_.current_config_);
    _impl_.payload_.current_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResponseEnvelope::unsafe_arena_set_allocated_current_config(
    ::hazkey::config::CurrentConfig* PROTOBUF_NULLABLE value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_current_config();
    _impl_.payload_.current_config_ = reinterpret_cast<::google::protobuf::Message*>(value);
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hazkey.ResponseEnvelope.current_config)
}
inline ::hazkey::config::CurrentConfig* PROTOBUF_NONNULL ResponseEnvelope::_internal_mutable_current_config() {
  if (payload_case() != kCurrentConfig) {
    clear_payload();
    set_has_current_config();
    _impl_.payload_.current_config_ = reinterpret_cast<::google::protobuf::Message*>(
        ::google::protobuf::Message::DefaultConstruct<::hazkey::config::CurrentConfig>(GetArena()));
  }
  return reinterpret_cast<::hazkey::config::CurrentConfig*>(_impl_.payload_.current_config_);
}
inline ::hazkey::config::CurrentConfig* PROTOBUF_NONNULL ResponseEnvelope::mutable_current_config()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hazkey::config::CurrentConfig* _msg = _internal_mutable_current_config();
  // @@protoc_insertion_point(field_mutable:hazkey.ResponseEnvelope.current_config)
  return _msg;
}

inline bool ResponseEnvelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ResponseEnvelope::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ResponseEnvelope::PayloadCase ResponseEnvelope::payload_case() const {
  return ResponseEnvelope::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace hazkey


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::hazkey::StatusCode> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::hazkey::StatusCode>() {
  return ::hazkey::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // base_2eproto_2epb_2eh
